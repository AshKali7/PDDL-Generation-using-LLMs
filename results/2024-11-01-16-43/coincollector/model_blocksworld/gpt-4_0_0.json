{
    "Move": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\nNo predicate has been defined yet",
        "action_desc": "This action enables the agent to move from one location to another in the specified direction. For example, the agent can move from location A to location B if they are connected in that direction and there is no closed door between them.",
        "iter_1": {
            "llm_output": "1. ?from - location: the current location of the agent\n2. ?to - location: the destination location where the agent wants to move\n3. ?dir - direction: the direction in which the agent wants to move\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (door-open ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (agent-at ?from))\n    (agent-at ?to)\n    (visited ?to)\n)\n```\n\nNew Predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from ?to ?dir - location location direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from ?to - location location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc",
            "error_type": "invalid_predicate_format",
            "feedback_msg": "There are syntax errors in the definition of the new predicate connected ?from ?to ?dir - location location direction. Please revise its definition and output the entire PDDL action model again. Note that you need to define the object type of each parameter and strictly follow the syntax of PDDL.\n\nParameters:"
        },
        "llm_output": "1. ?from - location: the current location of the agent\n2. ?to - location: the destination location where the agent wants to move\n3. ?dir - direction: the direction in which the agent wants to move\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (door-open ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (agent-at ?from))\n    (agent-at ?to)\n    (visited ?to)\n)\n```\n\nNew Predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from - location ?to - location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc",
        "iter_2": {
            "llm_output": "1. ?from - location: the current location of the agent\n2. ?to - location: the destination location where the agent wants to move\n3. ?dir - direction: the direction in which the agent wants to move\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (door-open ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (agent-at ?from))\n    (agent-at ?to)\n    (visited ?to)\n)\n```\n\nNew Predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from ?to - location location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc",
            "error_type": "invalid_predicate_format",
            "feedback_msg": "There are syntax errors in the definition of the new predicate door-open ?from ?to - location location. Please revise its definition and output the entire PDDL action model again. Note that you need to define the object type of each parameter and strictly follow the syntax of PDDL.\n\nParameters:"
        },
        "iter_3": {
            "llm_output": "1. ?from - location: the current location of the agent\n2. ?to - location: the destination location where the agent wants to move\n3. ?dir - direction: the direction in which the agent wants to move\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (door-open ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (agent-at ?from))\n    (agent-at ?to)\n    (visited ?to)\n)\n```\n\nNew Predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from - location ?to - location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc"
        },
        "new_predicates": [
            "(agent-at ?loc - location): true if the agent is at the location ?loc",
            "(connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir",
            "(door-open ?from - location ?to - location): true if the door between location ?from and location ?to is open",
            "(visited ?loc - location): true if the agent has visited the location ?loc"
        ]
    },
    "Open a Door": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from - location ?to - location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc",
        "action_desc": "This action enables the agent to open a closed door between two locations, allowing movement between them. For example, if there is a closed door between location A and location B, the agent at location A can open it, making it possible to move to location B.",
        "iter_1": {
            "llm_output": "1. ?from - location: the location where the agent is currently located\n2. ?to - location: the location that the agent wants to access by opening the door\n3. ?dir - direction: the direction from location ?from to location ?to\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (not (door-open ?from ?to))\n)\n```\n\nEffects:\n```\n(and\n    (door-open ?from ?to)\n)\n```\n\nNew Predicates:\n1. (door-closed ?from - location ?to - location): true if the door between location ?from and location ?to is closed. This is the negation of the predicate (door-open ?from ?to)."
        },
        "llm_output": "1. ?from - location: the location where the agent is currently located\n2. ?to - location: the location that the agent wants to access by opening the door\n3. ?dir - direction: the direction from location ?from to location ?to\n\nPreconditions:\n```\n(and\n    (agent-at ?from)\n    (connected ?from ?to ?dir)\n    (not (door-open ?from ?to))\n)\n```\n\nEffects:\n```\n(and\n    (door-open ?from ?to)\n)\n```\n\nNew Predicates:\n1. (door-closed ?from - location ?to - location): true if the door between location ?from and location ?to is closed. This is the negation of the predicate (door-open ?from ?to).",
        "new_predicates": [
            "(door-closed ?from - location ?to - location): true if the door between location ?from and location ?to is closed. This is the negation of the predicate (door-open ?from ?to)."
        ]
    },
    "Pick a Coin": {
        "predicate_prompt": "You can create and define new predicates, but you may also reuse the following predicates:\n1. (agent-at ?loc - location): true if the agent is at the location ?loc\n2. (connected ?from - location ?to - location ?dir - direction): true if location ?from is connected to location ?to in direction ?dir\n3. (door-open ?from - location ?to - location): true if the door between location ?from and location ?to is open\n4. (visited ?loc - location): true if the agent has visited the location ?loc\n5. (door-closed ?from - location ?to - location): true if the door between location ?from and location ?to is closed. This is the negation of the predicate (door-open ?from ?to).",
        "action_desc": "This action enables the agent to pick up a coin once it is in the same room where the coin is located. For example, if the agent is in location C, and a coin is found in the same location, the agent can pick up the coin, achieving the goal of collecting it.",
        "iter_1": {
            "llm_output": "1. ?loc - location: the location where the coin is located\n\nPreconditions:\n```\n(and\n    (agent-at ?loc)\n    (coin-at ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (coin-at ?loc))\n    (agent-has-coin)\n)\n```\n\nNew Predicates:\n1. (coin-at ?loc - location): true if the coin is at the location ?loc\n2. (agent-has-coin): true if the agent has picked up the coin"
        },
        "llm_output": "1. ?loc - location: the location where the coin is located\n\nPreconditions:\n```\n(and\n    (agent-at ?loc)\n    (coin-at ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (coin-at ?loc))\n    (agent-has-coin)\n)\n```\n\nNew Predicates:\n1. (coin-at ?loc - location): true if the coin is at the location ?loc\n2. (agent-has-coin): true if the agent has picked up the coin",
        "new_predicates": [
            "(coin-at ?loc - location): true if the coin is at the location ?loc",
            "(agent-has-coin): true if the agent has picked up the coin"
        ]
    }
}