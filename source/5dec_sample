Gold path: ['look around', 'open door to south', 'move south', 'take coin']
Action: look around
You are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. 
Step 0
Printing Output here:  {
  "objects": {
    "add": [
      "loc4 - location",  "corridor - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(connected kitchen loc4 south)",
      "(closed_door kitchen loc4)",
      "(connected kitchen corridor west)"
    ],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/57a2401c-982c-4503-8f42-9b3893ff11cf?external=True'}
resp[] /check/57a2401c-982c-4503-8f42-9b3893ff11cf?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 5 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 5\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.59994e-05\nNodes generated during search: 4\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.59994e-05 secs\n'}
actions ['(move kitchen corridor west)', '(reach-goal)']
before map actions ['(move kitchen corridor west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. 
Step 1
Printing Output here:  {
  "objects": {
    "add": [
      "loc5 - location",
      "loc6 - location",
      "living_room - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at corridor)",
      "(visited corridor)",
      "(connected corridor loc5 north)",
      "(closed_door corridor loc5)",
      "(connected corridor loc6 south)",
      "(closed_door corridor loc6)",
      "(connected corridor living_room west)",
      "(connected corridor kitchen east)"
    ],
    "replace": {
      "(at kitchen)": "(at corridor)"
    },
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at corridor)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/f2cc2cc0-4086-4083-91d7-1236fb425578?external=True'}
resp[] /check/f2cc2cc0-4086-4083-91d7-1236fb425578?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR LIVING_ROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 13 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 13\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 0.000100001\nNodes generated during search: 6\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 0.000100001 secs\n'}
actions ['(move corridor living_room west)', '(reach-goal)']
before map actions ['(move corridor living_room west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at corridor)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the living room. To the North you see a closed wood door. To the East you see the corridor. 
Step 2
Printing Output here:  {
  "objects": {
    "add": [
      "loc7 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at living_room)",
      "(visited living_room)",
      "(connected living_room loc7 north)",
      "(closed_door living_room loc7)",
      "(connected living_room corridor east)"
    ],
    "replace": {
      "(at corridor)": "(at living_room)"
    },
    "delete": [
      "(at corridor)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    loc7 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at living_room)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at living_room)
    (visited living_room)
    (connected living_room loc7 north)
    (closed_door living_room loc7)
    (connected living_room corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    loc7 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at living_room)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc7 north)\n    (closed_door living_room loc7)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/b9fea56f-ff5a-480d-bfa2-b06faded791e?external=True'}
resp[] /check/b9fea56f-ff5a-480d-bfa2-b06faded791e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM LOC7)\n(MOVE LIVING_ROOM LOC7 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 16 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 16\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 8.50007e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 8.50007e-05 secs\n'}
actions ['(open_door living_room loc7)', '(move living_room loc7 north)', '(reach-goal)']
before map actions ['(open_door living_room loc7)', '(move living_room loc7 north)']
after map actions ['open door to north', 'move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    loc7 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at living_room)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc7 north)\n    (closed_door living_room loc7)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to north', 'move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    loc7 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at living_room)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at living_room)
    (visited living_room)
    (connected living_room loc7 north)
    (closed_door living_room loc7)
    (connected living_room corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to north
Action: open door to north
You open the wood door, revealing the bathroom. 
Step 3
> move north
Action: move north
You are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. 
Step 4
Printing Output here:  {
  "objects": {
    "add": [
      "bathroom - location",
      "loc8 - location",
      "bedroom - location"
    ],
    "replace": {
      "loc7 - location": "bathroom - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at bathroom)",
      "(visited bathroom)",
      "(connected bathroom living_room south)",
      "(connected bathroom loc8 east)",
      "(closed_door bathroom loc8)",
      "(connected bathroom bedroom west)"
    ],
    "replace": {
      "(connected living_room loc7 north)": "(connected living_room bathroom north)",
      "(at living_room)": "(at bathroom)"
    },
    "delete": [
      "(closed_door living_room loc7)",
      "(at living_room)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc8 - location
    bedroom - location
  )
  (:init
    (at bathroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bathroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bathroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bathroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc8 east)
    (closed_door bathroom loc8)
    (connected bathroom bedroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bathroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bathroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8bf07d15-3110-44a0-abaa-fef553489cd4?external=True'}
resp[] /check/8bf07d15-3110-44a0-abaa-fef553489cd4?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BATHROOM BEDROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 20 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 20\n\t#Fluents: 18\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 9.20005e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 9.20005e-05 secs\n'}
actions ['(move bathroom bedroom west)', '(reach-goal)']
before map actions ['(move bathroom bedroom west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    loc7 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at living_room)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc7 north)\n    (closed_door living_room loc7)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bathroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bathroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc8 - location
    bedroom - location
  )
  (:init
    (at bathroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bathroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bathroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bathroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc8 east)
    (closed_door bathroom loc8)
    (connected bathroom bedroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the bedroom. To the East you see the bathroom. 
Step 5
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at bedroom)",
      "(visited bedroom)",
      "(connected bedroom bathroom east)"
    ],
    "replace": {
      "(at bathroom)": "(at bedroom)"
    },
    "delete": [
      "(at bathroom)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc8 - location
    bedroom - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc8 east)
    (closed_door bathroom loc8)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/c218724d-ab84-4526-b8ae-5d93e2fd7bd3?external=True'}
resp[] /check/c218724d-ab84-4526-b8ae-5d93e2fd7bd3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BEDROOM BATHROOM EAST)\n(OPEN_DOOR BATHROOM LOC8)\n(MOVE BATHROOM LOC8 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 20 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 20\n\t#Fluents: 18\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 0.000115\nNodes generated during search: 13\nNodes expanded during search: 7\nPlan found with cost: 4\nFast-BFS search completed in 0.000115 secs\n'}
actions ['(move bedroom bathroom east)', '(open_door bathroom loc8)', '(move bathroom loc8 east)', '(reach-goal)']
before map actions ['(move bedroom bathroom east)', '(open_door bathroom loc8)', '(move bathroom loc8 east)']
after map actions ['move east', 'open door to east', 'move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bathroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bathroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'open door to east', 'move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc8 - location
    bedroom - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc8 east)
    (closed_door bathroom loc8)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. 
Step 6
> open door to east
Action: open door to east
You open the wood door, revealing the laundry room. 
Step 7
> move east
Action: move east
You are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. 
Step 8
Printing Output here:  {
  "objects": {
    "add": [
      "laundry_room - location"
    ],
    "replace": {
      "loc8 - location": "laundry_room - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at laundry_room)",
      "(visited laundry_room)",
      "(connected laundry_room bathroom west)",
      "(connected laundry_room loc9 south)",
      "(closed_door laundry_room loc9)"
    ],
    "replace": {
      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",
      "(at bathroom)": "(at laundry_room)"
    },
    "delete": [
      "(closed_door bathroom loc8)",
      "(at bathroom)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room loc9 south)
    (closed_door laundry_room loc9)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room loc9 south)\n    (closed_door laundry_room loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/90747b52-a9d2-43eb-8d44-9555d5ee8b96?external=True'}
resp[] /check/90747b52-a9d2-43eb-8d44-9555d5ee8b96?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant LOC9 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing Output here:  {
  "objects": {
    "add": [
      "laundry_room - location"
    ],
    "replace": {
      "loc8 - location": "laundry_room - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at laundry_room)",
      "(visited laundry_room)",
      "(connected laundry_room bathroom west)"
    ],
    "replace": {
      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",
      "(at bathroom)": "(at laundry_room)",
      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"
    },
    "delete": [
      "(closed_door bathroom loc8)",
      "(at bathroom)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2d365738-a094-49b8-9374-239eda8f09a8?external=True'}
resp[] /check/2d365738-a094-49b8-9374-239eda8f09a8?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LAUNDRY_ROOM BATHROOM WEST)\n(MOVE BATHROOM LIVING_ROOM SOUTH)\n(MOVE LIVING_ROOM CORRIDOR EAST)\n(OPEN_DOOR CORRIDOR LOC5)\n(MOVE CORRIDOR LOC5 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 20 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 20\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[1 / 4]--\n--[1 / 5]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 0.000130999\nNodes generated during search: 25\nNodes expanded during search: 15\nPlan found with cost: 6\nFast-BFS search completed in 0.000130999 secs\n'}
actions ['(move laundry_room bathroom west)', '(move bathroom living_room south)', '(move living_room corridor east)', '(open_door corridor loc5)', '(move corridor loc5 north)', '(reach-goal)']
before map actions ['(move laundry_room bathroom west)', '(move bathroom living_room south)', '(move living_room corridor east)', '(open_door corridor loc5)', '(move corridor loc5 north)']
after map actions ['move west', 'move south', 'move east', 'open door to north', 'move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc8 - location\n    bedroom - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc8 east)\n    (closed_door bathroom loc8)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west', 'move south', 'move east', 'open door to north', 'move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor loc5 north)
    (closed_door corridor loc5)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. 
Step 9
> move south
Action: move south
You are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. 
Step 10
> move east
Action: move east
You are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. 
Step 11
> open door to north
Action: open door to north
You open the wood door, revealing the laundry room. 
Step 12
> move north
Action: move north
You are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. 
Step 13
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {
      "loc5 - location": "laundry_room - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at laundry_room)",
      "(visited laundry_room)",
      "(connected laundry_room corridor south)"
    ],
    "replace": {
      "(at living_room)": "(at laundry_room)",
      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"
    },
    "delete": [
      "(at bathroom)",
      "(closed_door corridor loc5)",
      "(at corridor)",
      "(at living_room)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room corridor south)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/73e1e3c4-9ef4-408c-b476-511186e16b05?external=True'}
resp[] /check/73e1e3c4-9ef4-408c-b476-511186e16b05?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LAUNDRY_ROOM CORRIDOR SOUTH)\n(OPEN_DOOR CORRIDOR LOC6)\n(MOVE CORRIDOR LOC6 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 19 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 19\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 8.50003e-05\nNodes generated during search: 19\nNodes expanded during search: 12\nPlan found with cost: 4\nFast-BFS search completed in 8.50003e-05 secs\n'}
actions ['(move laundry_room corridor south)', '(open_door corridor loc6)', '(move corridor loc6 south)', '(reach-goal)']
before map actions ['(move laundry_room corridor south)', '(open_door corridor loc6)', '(move corridor loc6 south)']
after map actions ['move south', 'open door to south', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor loc5 north)\n    (closed_door corridor loc5)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south', 'open door to south', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    loc6 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room corridor south)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. 
Step 14
> open door to south
Action: open door to south
You open the sliding patio door, revealing the backyard. 
Step 15
> move south
Action: move south
You are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. 
Step 16
Printing Output here:  {
  "objects": {
    "add": [
      "backyard - location",
      "driveway - location",
      "street - location"
    ],
    "replace": {
      "loc6 - location": "backyard - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at backyard)",
      "(visited backyard)",
      "(connected backyard corridor north)",
      "(connected backyard driveway south)",
      "(connected backyard street west)"
    ],
    "replace": {
      "(connected corridor loc6 south)": "(connected corridor backyard south)",
      "(at laundry_room)": "(at corridor)",
      "(closed_door corridor loc6)": "(connected backyard corridor north)"
    },
    "delete": [
      "(at corridor)",
      "(closed_door corridor loc6)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at backyard)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/4ac59610-717c-4dc5-b081-ca9fae4a7048?external=True'}
resp[] /check/4ac59610-717c-4dc5-b081-ca9fae4a7048?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD STREET WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 23 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 23\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 0.000110001\nNodes generated during search: 13\nNodes expanded during search: 6\nPlan found with cost: 2\nFast-BFS search completed in 0.000110001 secs\n'}
actions ['(move backyard street west)', '(reach-goal)']
before map actions ['(move backyard street west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    loc6 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to south\nYou open the sliding patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "driveway - location",\n      "street - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard driveway south)",\n      "(connected backyard street west)"\n    ],\n    "replace": {\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(at laundry_room)": "(at corridor)",\n      "(closed_door corridor loc6)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(at corridor)",\n      "(closed_door corridor loc6)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at backyard)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the street. To the East you see the backyard. To the West you see a closed sliding door. 
Step 17
Printing Output here:  {
  "objects": {
    "add": [
      "loc9 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at street)",
      "(visited street)",
      "(connected street backyard east)",
      "(connected street loc9 west)",
      "(closed_door street loc9)"
    ],
    "replace": {
      "(at backyard)": "(at street)"
    },
    "delete": [
      "(at backyard)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    loc9 - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street loc9 west)
    (closed_door street loc9)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    loc9 - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street loc9 west)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/e27a92e0-004f-4959-8fe1-c161c6e7c4ab?external=True'}
resp[] /check/e27a92e0-004f-4959-8fe1-c161c6e7c4ab?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR STREET LOC9)\n(MOVE STREET LOC9 WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 26 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 26\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.70005e-05\nNodes generated during search: 22\nNodes expanded during search: 10\nPlan found with cost: 3\nFast-BFS search completed in 9.70005e-05 secs\n'}
actions ['(open_door street loc9)', '(move street loc9 west)', '(reach-goal)']
before map actions ['(open_door street loc9)', '(move street loc9 west)']
after map actions ['open door to west', 'move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to south\nYou open the sliding patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "driveway - location",\n      "street - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard driveway south)",\n      "(connected backyard street west)"\n    ],\n    "replace": {\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(at laundry_room)": "(at corridor)",\n      "(closed_door corridor loc6)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(at corridor)",\n      "(closed_door corridor loc6)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the street. To the East you see the backyard. To the West you see a closed sliding door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard east)",\n      "(connected street loc9 west)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": [\n      "(at backyard)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    loc9 - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street loc9 west)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to west', 'move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    loc9 - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street loc9 west)
    (closed_door street loc9)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to west
Action: open door to west
You open the sliding door, revealing the supermarket. 
Step 18
> move west
Action: move west
You are in the supermarket. Through an open sliding door, to the East you see the street. 
Step 19
Printing Output here:  {
  "objects": {
    "add": [
      "supermarket - location"
    ],
    "replace": {
      "loc9 - location": "supermarket - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at supermarket)",
      "(visited supermarket)",
      "(connected supermarket street east)"
    ],
    "replace": {
      "(connected street loc9 west)": "(connected street supermarket west)",
      "(closed_door street loc9)": "(connected supermarket street east)",
      "(at street)": "(at supermarket)"
    },
    "delete": [
      "(closed_door street loc9)",
      "(at street)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at supermarket)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at supermarket)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at supermarket)
    (visited supermarket)
    (connected supermarket street east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at supermarket)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/05ac876f-9647-4e31-bf0f-893a9356d8a5?external=True'}
resp[] /check/05ac876f-9647-4e31-bf0f-893a9356d8a5?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR BACKYARD SOUTH)\n(MOVE BACKYARD DRIVEWAY SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 26 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 26\n\t#Fluents: 14\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 8.8e-05\nNodes generated during search: 18\nNodes expanded during search: 10\nPlan found with cost: 3\nFast-BFS search completed in 8.8e-05 secs\n'}
actions ['(move corridor backyard south)', '(move backyard driveway south)', '(reach-goal)']
before map actions ['(move corridor backyard south)', '(move backyard driveway south)']
after map actions ['move south', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to south\nYou open the sliding patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "driveway - location",\n      "street - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard driveway south)",\n      "(connected backyard street west)"\n    ],\n    "replace": {\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(at laundry_room)": "(at corridor)",\n      "(closed_door corridor loc6)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(at corridor)",\n      "(closed_door corridor loc6)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the street. To the East you see the backyard. To the West you see a closed sliding door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard east)",\n      "(connected street loc9 west)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": [\n      "(at backyard)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    loc9 - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street loc9 west)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the sliding door, revealing the supermarket. \nAction: move west\nYou are in the supermarket. Through an open sliding door, to the East you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "supermarket - location"\n    ],\n    "replace": {\n      "loc9 - location": "supermarket - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at supermarket)",\n      "(visited supermarket)",\n      "(connected supermarket street east)"\n    ],\n    "replace": {\n      "(connected street loc9 west)": "(connected street supermarket west)",\n      "(closed_door street loc9)": "(connected supermarket street east)",\n      "(at street)": "(at supermarket)"\n    },\n    "delete": [\n      "(closed_door street loc9)",\n      "(at street)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at supermarket)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at supermarket)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at supermarket)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at supermarket)
    (visited supermarket)
    (connected supermarket street east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
Unknown action: I'm not sure what you mean.
Step 20
> move south
Action: move south
Unknown action: I'm not sure what you mean.
Step 21
Printing Output here:  {"init": {
    "add": ["(at driveway)", "(visited driveway)"],
    "delete": ["(at supermarket)"],
    "replace": {}
  }
}
Edit JSON invalid. Retrying...
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at street)"
    ],
    "replace": {
      "(at supermarket)": "(at street)"
    },
    "delete": [
      "(at supermarket)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at street)
    (visited supermarket)
    (connected supermarket street east)
    (at street)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at street)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at street)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/343f9d14-7ea3-4731-93b1-f0466536a7ea?external=True'}
resp[] /check/343f9d14-7ea3-4731-93b1-f0466536a7ea?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE STREET BACKYARD EAST)\n(MOVE BACKYARD DRIVEWAY SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 26 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 26\n\t#Fluents: 14\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.39995e-05\nNodes generated during search: 23\nNodes expanded during search: 11\nPlan found with cost: 3\nFast-BFS search completed in 9.39995e-05 secs\n'}
actions ['(move street backyard east)', '(move backyard driveway south)', '(reach-goal)']
before map actions ['(move street backyard east)', '(move backyard driveway south)']
after map actions ['move east', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to south\nYou open the sliding patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "driveway - location",\n      "street - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard driveway south)",\n      "(connected backyard street west)"\n    ],\n    "replace": {\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(at laundry_room)": "(at corridor)",\n      "(closed_door corridor loc6)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(at corridor)",\n      "(closed_door corridor loc6)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the street. To the East you see the backyard. To the West you see a closed sliding door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard east)",\n      "(connected street loc9 west)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": [\n      "(at backyard)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the sliding door, revealing the supermarket. \nAction: move west\nYou are in the supermarket. Through an open sliding door, to the East you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "supermarket - location"\n    ],\n    "replace": {\n      "loc9 - location": "supermarket - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at supermarket)",\n      "(visited supermarket)",\n      "(connected supermarket street east)"\n    ],\n    "replace": {\n      "(connected street loc9 west)": "(connected street supermarket west)",\n      "(closed_door street loc9)": "(connected supermarket street east)",\n      "(at street)": "(at supermarket)"\n    },\n    "delete": [\n      "(closed_door street loc9)",\n      "(at street)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at supermarket)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nUnknown action: I'm not sure what you mean.\nAction: move south\nUnknown action: I'm not sure what you mean.\n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)"\n    ],\n    "replace": {\n      "(at supermarket)": "(at street)"\n    },\n    "delete": [\n      "(at supermarket)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at street)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at street)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at street)
    (visited supermarket)
    (connected supermarket street east)
    (at street)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the street. To the East you see the backyard. Through an open sliding door, to the West you see the supermarket. 
Step 22
> move south
Action: move south
Unknown action: I'm not sure what you mean.
Step 23
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at street)"
    ],
    "replace": {
      "(at supermarket)": "(at street)"
    },
    "delete": [
      "(at supermarket)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at street)
    (visited supermarket)
    (connected supermarket street east)
    (at street)
    (at street)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at street)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at street)\n    (at street)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/175acfe8-1d98-4915-84c0-adfa804e876a?external=True'}
resp[] /check/175acfe8-1d98-4915-84c0-adfa804e876a?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE STREET BACKYARD EAST)\n(MOVE BACKYARD DRIVEWAY SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 26 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 26\n\t#Fluents: 14\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.20008e-05\nNodes generated during search: 23\nNodes expanded during search: 11\nPlan found with cost: 3\nFast-BFS search completed in 9.20008e-05 secs\n'}
actions ['(move street backyard east)', '(move backyard driveway south)', '(reach-goal)']
before map actions ['(move street backyard east)', '(move backyard driveway south)']
after map actions ['move east', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location",  "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc5 - location",\n      "loc6 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc5 north)",\n      "(closed_door corridor loc5)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc7 north)",\n      "(closed_door living_room loc7)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc8 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc7 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc8 east)",\n      "(closed_door bathroom loc8)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc7 north)": "(connected living_room bathroom north)",\n      "(at living_room)": "(at bathroom)"\n    },\n    "delete": [\n      "(closed_door living_room loc7)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {\n      "(at bathroom)": "(at bedroom)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location"\n    ],\n    "replace": {\n      "loc8 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)"\n    ],\n    "replace": {\n      "(connected bathroom loc8 east)": "(connected bathroom laundry_room east)",\n      "(at bathroom)": "(at laundry_room)",\n      "(closed_door bathroom loc8)": "(connected laundry_room bathroom west)"\n    },\n    "delete": [\n      "(closed_door bathroom loc8)",\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bathroom. Through an open wood door, to the South you see the living room. Through an open wood door, to the East you see the laundry room. To the West you see the bedroom. \nAction: move south\nYou are in the living room. Through an open wood door, to the North you see the bathroom. To the East you see the corridor. \nAction: move east\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the corridor. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room corridor south)"\n    ],\n    "replace": {\n      "(at living_room)": "(at laundry_room)",\n      "(connected corridor loc5 north)": "(connected corridor laundry_room north)"\n    },\n    "delete": [\n      "(at bathroom)",\n      "(closed_door corridor loc5)",\n      "(at corridor)",\n      "(at living_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \nAction: open door to south\nYou open the sliding patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "driveway - location",\n      "street - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard driveway south)",\n      "(connected backyard street west)"\n    ],\n    "replace": {\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(at laundry_room)": "(at corridor)",\n      "(closed_door corridor loc6)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(at corridor)",\n      "(closed_door corridor loc6)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the street. To the East you see the backyard. To the West you see a closed sliding door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard east)",\n      "(connected street loc9 west)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": [\n      "(at backyard)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the sliding door, revealing the supermarket. \nAction: move west\nYou are in the supermarket. Through an open sliding door, to the East you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "supermarket - location"\n    ],\n    "replace": {\n      "loc9 - location": "supermarket - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at supermarket)",\n      "(visited supermarket)",\n      "(connected supermarket street east)"\n    ],\n    "replace": {\n      "(connected street loc9 west)": "(connected street supermarket west)",\n      "(closed_door street loc9)": "(connected supermarket street east)",\n      "(at street)": "(at supermarket)"\n    },\n    "delete": [\n      "(closed_door street loc9)",\n      "(at street)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nUnknown action: I'm not sure what you mean.\nAction: move south\nUnknown action: I'm not sure what you mean.\n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)"\n    ],\n    "replace": {\n      "(at supermarket)": "(at street)"\n    },\n    "delete": [\n      "(at supermarket)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at street)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at street)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move east\nYou are in the street. To the East you see the backyard. Through an open sliding door, to the West you see the supermarket. \nAction: move south\nUnknown action: I'm not sure what you mean.\n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)"\n    ],\n    "replace": {\n      "(at supermarket)": "(at street)"\n    },\n    "delete": [\n      "(at supermarket)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (at street)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (at street)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at street)\n    (at street)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (at street)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (at street)
    (visited supermarket)
    (connected supermarket street east)
    (at street)
    (at street)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the backyard. Through an open sliding patio door, to the North you see the corridor. To the South you see the driveway. To the West you see the street. 
Step 24
> move south
Action: move south
You are in the driveway. To the North you see the backyard. 
Step 25
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at driveway)",
      "(visited driveway)",
      "(connected driveway backyard north)"
    ],
    "replace": {
      "(at backyard)": "(at driveway)"
    },
    "delete": [
      "(at backyard)",
      "(at street)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc4 - location
    corridor - location
    laundry_room - location
    backyard - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    backyard - location
    driveway - location
    street - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (connected kitchen corridor west)
    (at bedroom)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor backyard south)
    (connected backyard corridor north)
    (connected corridor living_room west)
    (connected corridor kitchen east)
    (at bedroom)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bedroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (connected laundry_room bathroom west)
    (connected bathroom bedroom west)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (at corridor)
    (visited laundry_room)
    (connected laundry_room corridor south)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard driveway south)
    (connected backyard street west)
    (visited street)
    (connected street backyard east)
    (connected street supermarket west)
    (connected supermarket street east)
    (visited supermarket)
    (connected supermarket street east)
    (at driveway)
    (visited driveway)
    (connected driveway backyard north)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc4 - location\n    corridor - location\n    laundry_room - location\n    backyard - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    backyard - location\n    driveway - location\n    street - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (connected kitchen corridor west)\n    (at bedroom)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor backyard south)\n    (connected backyard corridor north)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n    (at bedroom)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bedroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (connected laundry_room bathroom west)\n    (connected bathroom bedroom west)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (at corridor)\n    (visited laundry_room)\n    (connected laundry_room corridor south)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard driveway south)\n    (connected backyard street west)\n    (visited street)\n    (connected street backyard east)\n    (connected street supermarket west)\n    (connected supermarket street east)\n    (visited supermarket)\n    (connected supermarket street east)\n    (at driveway)\n    (visited driveway)\n    (connected driveway backyard north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2f840b7f-ef32-43ed-8aab-afcc377d62d5?external=True'}
resp[] /check/2f840b7f-ef32-43ed-8aab-afcc377d62d5?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR KITCHEN EAST)\n(OPEN_DOOR KITCHEN LOC4)\n(MOVE KITCHEN LOC4 SOUTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 25 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 25\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.00007e-05\nNodes generated during search: 19\nNodes expanded during search: 10\nPlan found with cost: 3\nFast-BFS search completed in 9.00007e-05 secs\n'}
actions ['(move corridor kitchen east)', '(open_door kitchen loc4)', '(move kitchen loc4 south)']
