obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'open door to east', 'move north', 'inventory', 'look around', 'open door to north', 'move west', 'close door to east', 'close door to north'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to north', 'open door to east', 'move north', 'open door to west', 'move west', 'open door to south', 'move south', 'open door to south', 'open door to west', 'move east', 'move east', 'move west', 'move east', 'move west', 'move west', 'move west', 'open door to south', 'move west', 'open door to west', 'move west', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l1 north) ; Placeholder for the unknown location behind the North door
    (connected kitchen l2 east) ; Placeholder for the unknown location behind the East door
    (connected kitchen corridor west) ; Direct connection to the corridor
    (closed_door kitchen l1) ; There's a closed wood door to the North
    (closed_door kitchen l2) ; There's a closed frosted-glass door to the East
    ; We assume the corridor has been visited, but it is not formalized in the given observation
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l1 north) ; Placeholder for the unknown location behind the North door\n    (connected kitchen l2 east) ; Placeholder for the unknown location behind the East door\n    (connected kitchen corridor west) ; Direct connection to the corridor\n    (closed_door kitchen l1) ; There's a closed wood door to the North\n    (closed_door kitchen l2) ; There's a closed frosted-glass door to the East\n    ; We assume the corridor has been visited, but it is not formalized in the given observation\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)"}
Output of job request {'result': '/check/d7490e22-1dfc-43b4-ab87-9104db198a20?external=True'}
resp[] /check/d7490e22-1dfc-43b4-ab87-9104db198a20?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 8 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 8\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.59993e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 5.59993e-05 secs\n'}
actions ['(move kitchen corridor west)', '(reach-goal)']
before map actions ['(move kitchen corridor west)']
after map actions ['move west']
> move west
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed patio door. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 l3 l4 - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen l1 north) ; The North door in the kitchen leads to an unknown location l1
    (connected kitchen l2 east) ; The East door in the kitchen leads to an unknown location l2
    (connected kitchen corridor west) ; Connection from the kitchen to the corridor
    (connected corridor l3 north) ; Placeholder for the unknown location behind the North door in the corridor
    (connected corridor l4 south) ; Placeholder for the unknown location behind the South door in the corridor
    (connected corridor kitchen east) ; Connection from the corridor back to the kitchen
    (connected corridor l5 west) ; Placeholder for the unknown location behind the West door in the corridor
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door corridor l3) ; There's a closed wood door to the North in the corridor
    (closed_door corridor l4) ; There's a closed wood door to the South in the corridor
    (closed_door corridor l5) ; There's a closed patio door to the West in the corridor
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 l3 l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited corridor)\n    (connected kitchen l1 north) ; The North door in the kitchen leads to an unknown location l1\n    (connected kitchen l2 east) ; The East door in the kitchen leads to an unknown location l2\n    (connected kitchen corridor west) ; Connection from the kitchen to the corridor\n    (connected corridor l3 north) ; Placeholder for the unknown location behind the North door in the corridor\n    (connected corridor l4 south) ; Placeholder for the unknown location behind the South door in the corridor\n    (connected corridor kitchen east) ; Connection from the corridor back to the kitchen\n    (connected corridor l5 west) ; Placeholder for the unknown location behind the West door in the corridor\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door corridor l3) ; There's a closed wood door to the North in the corridor\n    (closed_door corridor l4) ; There's a closed wood door to the South in the corridor\n    (closed_door corridor l5) ; There's a closed patio door to the West in the corridor\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)"}
Output of job request {'result': '/check/76cdf530-c700-476b-abbf-b6977ec2013f?external=True'}
resp[] /check/76cdf530-c700-476b-abbf-b6977ec2013f?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L5 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 l3 l4 - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen corridor east)
    (connected corridor kitchen east)
    (connected corridor l1 north) ; Placeholder for the unknown location behind the North door
    (connected corridor l2 south) ; Placeholder for the unknown location behind the South door
    (connected corridor l3 west) ; Placeholder for the unknown location behind the West door
    ; We maintain the connections from the kitchen
    (connected kitchen l1 north)
    (connected kitchen l2 east)
    (closed_door kitchen l1) ; The North door from the kitchen is still closed
    (closed_door kitchen l2) ; The East door from the kitchen is still closed
    (closed_door corridor l1) ; There's a closed wood door to the North in the corridor
    (closed_door corridor l2) ; There's a closed wood door to the South in the corridor
    (closed_door corridor l3) ; There's a closed patio door to the West in the corridor
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 l3 l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited corridor)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east)\n    (connected corridor l1 north) ; Placeholder for the unknown location behind the North door\n    (connected corridor l2 south) ; Placeholder for the unknown location behind the South door\n    (connected corridor l3 west) ; Placeholder for the unknown location behind the West door\n    ; We maintain the connections from the kitchen\n    (connected kitchen l1 north)\n    (connected kitchen l2 east)\n    (closed_door kitchen l1) ; The North door from the kitchen is still closed\n    (closed_door kitchen l2) ; The East door from the kitchen is still closed\n    (closed_door corridor l1) ; There's a closed wood door to the North in the corridor\n    (closed_door corridor l2) ; There's a closed wood door to the South in the corridor\n    (closed_door corridor l3) ; There's a closed patio door to the West in the corridor\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)"}
Output of job request {'result': '/check/1f649880-5788-4251-9b76-a799c91d1ab4?external=True'}
resp[] /check/1f649880-5788-4251-9b76-a799c91d1ab4?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR CORRIDOR L1)\n(MOVE CORRIDOR L1 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 15 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 15\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 6.90003e-05\nNodes generated during search: 14\nNodes expanded during search: 7\nPlan found with cost: 3\nFast-BFS search completed in 6.90003e-05 secs\n'}
actions ['(open_door corridor l1)', '(move corridor l1 north)', '(reach-goal)']
before map actions ['(open_door corridor l1)', '(move corridor l1 north)']
after map actions ['open door to north', 'move north']
> open door to north
Action: open door to north
You open the wood door, revealing the bathroom. 
Step 2
> move north
Action: move north
You are in the bathroom. Through an open wood door, to the South you see the corridor. To the East you see a closed wood door. 
Step 3
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom l2 l3 l4 l5 - location
    north south east west - direction
  )
  (:init
    (at bathroom)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (connected kitchen corridor east)
    (connected corridor kitchen east)
    (connected corridor bathroom north) ; North of the corridor is the bathroom
    (connected bathroom corridor south) ; To the South of the bathroom is the corridor
    (connected bathroom l5 east)       ; Placeholder for the unknown location behind the East door in the bathroom
    ; Maintaining the rest from previous updates
    (connected kitchen l2 north)
    (connected kitchen l3 east)
    (connected corridor l3 west)       ; The corridor's connection to the West
    (connected corridor l4 south)      ; Placeholder for the unknown South location from the corridor
    (closed_door kitchen l2)           ; The North door from the kitchen is still closed
    (closed_door kitchen l3)           ; The East door from the kitchen is still closed
    (closed_door bathroom l5)          ; There's a closed wood door to the East in the bathroom
    (closed_door corridor l3)          ; The West patio door in the corridor is still closed
    (closed_door corridor l4)          ; The South wood door in the corridor is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom l2 l3 l4 l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north) ; North of the corridor is the bathroom\n    (connected bathroom corridor south) ; To the South of the bathroom is the corridor\n    (connected bathroom l5 east)       ; Placeholder for the unknown location behind the East door in the bathroom\n    ; Maintaining the rest from previous updates\n    (connected kitchen l2 north)\n    (connected kitchen l3 east)\n    (connected corridor l3 west)       ; The corridor's connection to the West\n    (connected corridor l4 south)      ; Placeholder for the unknown South location from the corridor\n    (closed_door kitchen l2)           ; The North door from the kitchen is still closed\n    (closed_door kitchen l3)           ; The East door from the kitchen is still closed\n    (closed_door bathroom l5)          ; There's a closed wood door to the East in the bathroom\n    (closed_door corridor l3)          ; The West patio door in the corridor is still closed\n    (closed_door corridor l4)          ; The South wood door in the corridor is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/9826d17e-bab3-4399-a55b-84222757f507?external=True'}
resp[] /check/9826d17e-bab3-4399-a55b-84222757f507?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR BATHROOM L5)\n(MOVE BATHROOM L5 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 18 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 18\n\t#Fluents: 18\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.70001e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 6.70001e-05 secs\n'}
actions ['(open_door bathroom l5)', '(move bathroom l5 east)', '(reach-goal)']
before map actions ['(open_door bathroom l5)', '(move bathroom l5 east)']
after map actions ['open door to east', 'move east']
> open door to east
Action: open door to east
You open the wood door, revealing the laundry room. 
Step 4
> move east
Action: move east
You are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. 
Step 5
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry l2 l3 l4 l6 - location
    north south east west - direction
  )
  (:init
    (at laundry)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (connected kitchen corridor east)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east) ; East of the bathroom is the laundry room
    (connected laundry bathroom west) ; To the West of the laundry room is the bathroom
    (connected laundry l6 south)      ; Placeholder for the unknown location behind the South door in the laundry room
    ; Maintaining the rest from previous updates
    (connected kitchen l2 north)
    (connected kitchen l3 east)
    (connected corridor l3 west)      
    (connected corridor l4 south)     
    (closed_door kitchen l2)          
    (closed_door kitchen l3)          
    (closed_door laundry l6)           ; There's a closed wood door to the South in the laundry room
    (closed_door corridor l3)          
    (closed_door corridor l4)          
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry l2 l3 l4 l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at laundry)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east) ; East of the bathroom is the laundry room\n    (connected laundry bathroom west) ; To the West of the laundry room is the bathroom\n    (connected laundry l6 south)      ; Placeholder for the unknown location behind the South door in the laundry room\n    ; Maintaining the rest from previous updates\n    (connected kitchen l2 north)\n    (connected kitchen l3 east)\n    (connected corridor l3 west)      \n    (connected corridor l4 south)     \n    (closed_door kitchen l2)          \n    (closed_door kitchen l3)          \n    (closed_door laundry l6)           ; There's a closed wood door to the South in the laundry room\n    (closed_door corridor l3)          \n    (closed_door corridor l4)          \n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/5d8310f0-abb2-42f0-bc65-6a1a6cbe38e3?external=True'}
resp[] /check/5d8310f0-abb2-42f0-bc65-6a1a6cbe38e3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LAUNDRY L6)\n(MOVE LAUNDRY L6 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 20 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 20\n\t#Fluents: 19\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 8.50001e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 8.50001e-05 secs\n'}
actions ['(open_door laundry l6)', '(move laundry l6 south)', '(reach-goal)']
before map actions ['(open_door laundry l6)', '(move laundry l6 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the wood door, revealing the kitchen. 
Step 6
> move south
Action: move south
You are in the kitchen. Through an open wood door, to the North you see the laundry room. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Step 7
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry l3 l4 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (connected kitchen corridor west)
    (connected corridor kitchen west)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south) ; Based on latest observation, South of the laundry is the kitchen
    (connected laundry bathroom west)
    ; Maintaining the rest from previous updates
    (connected kitchen l3 east) ; Placeholder for the unknown location behind the East door in the kitchen
    (connected corridor l4 south)     
    (closed_door kitchen l3) ; The East frosted-glass door in the kitchen is still closed
    (closed_door corridor l4) ; The South wood door in the corridor is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry l3 l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (connected kitchen corridor west)\n    (connected corridor kitchen west)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south) ; Based on latest observation, South of the laundry is the kitchen\n    (connected laundry bathroom west)\n    ; Maintaining the rest from previous updates\n    (connected kitchen l3 east) ; Placeholder for the unknown location behind the East door in the kitchen\n    (connected corridor l4 south)     \n    (closed_door kitchen l3) ; The East frosted-glass door in the kitchen is still closed\n    (closed_door corridor l4) ; The South wood door in the corridor is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/09392ba9-182f-4f11-9930-3386cb498260?external=True'}
resp[] /check/09392ba9-182f-4f11-9930-3386cb498260?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR KITCHEN L3)\n(MOVE KITCHEN L3 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 13 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 13\n\t#Fluents: 11\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.69998e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 6.69998e-05 secs\n'}
actions ['(open_door kitchen l3)', '(move kitchen l3 east)', '(reach-goal)']
before map actions ['(open_door kitchen l3)', '(move kitchen l3 east)']
after map actions ['open door to east', 'move east']
> open door to east
Action: open door to east
You open the frosted-glass door, revealing the pantry. 
Step 8
> move east
Action: move east
You are in the pantry. Through an open frosted-glass door, to the West you see the kitchen. 
Step 9
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry l4 - location
    north south east west - direction
  )
  (:init
    (at pantry)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (connected kitchen pantry east) ; Based on latest observation, East of the kitchen is the pantry
    (connected pantry kitchen west) ; To the West of the pantry is the kitchen
    (connected kitchen corridor west)
    (connected corridor kitchen west)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor l4 south) ; Placeholder for the unknown location behind the South door in the corridor
    ; Previous doors have either been visited or are presumed to remain closed
    (closed_door corridor l4) ; The South wood door in the corridor is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (connected kitchen pantry east) ; Based on latest observation, East of the kitchen is the pantry\n    (connected pantry kitchen west) ; To the West of the pantry is the kitchen\n    (connected kitchen corridor west)\n    (connected corridor kitchen west)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor l4 south) ; Placeholder for the unknown location behind the South door in the corridor\n    ; Previous doors have either been visited or are presumed to remain closed\n    (closed_door corridor l4) ; The South wood door in the corridor is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/4cec40fd-1085-4e3e-bccc-4f1f715081e6?external=True'}
resp[] /check/4cec40fd-1085-4e3e-bccc-4f1f715081e6?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE PANTRY KITCHEN WEST)\n(MOVE KITCHEN CORRIDOR WEST)\n(OPEN_DOOR CORRIDOR L4)\n(MOVE CORRIDOR L4 SOUTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 8\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 6.8e-05\nNodes generated during search: 11\nNodes expanded during search: 5\nPlan found with cost: 4\nFast-BFS search completed in 6.8e-05 secs\n'}
actions ['(move pantry kitchen west)', '(move kitchen corridor west)', '(open_door corridor l4)', '(move corridor l4 south)']
before map actions ['(move pantry kitchen west)', '(move kitchen corridor west)', '(open_door corridor l4)', '(move corridor l4 south)']
after map actions ['move west', 'move west', 'open door to south', 'move south']
> move west
Action: move west
You are in the kitchen. Through an open wood door, to the North you see the laundry room. Through an open frosted-glass door, to the East you see the pantry. To the West you see the corridor. 
Step 10
> move west
Action: move west
You are in the corridor. Through an open wood door, to the North you see the bathroom. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed patio door. 
Step 11
> open door to south
Action: open door to south
You open the wood door, revealing the bedroom. 
Step 12
> move south
Action: move south
You are in the bedroom. Through an open wood door, to the North you see the corridor. To the West you see a closed wood door. 
Step 13
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom l7 - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south) ; South of the corridor is the bedroom based on the latest action
    (connected bedroom corridor north) ; To the North of the bedroom is the corridor
    (connected bedroom l7 west)        ; Placeholder for the unknown location behind the West door in the bedroom
    (closed_door bedroom l7)           ; There's a closed wood door to the West in the bedroom
    (connected corridor l1 west)       ; Placeholder for the unknown location behind the West patio door in the corridor, previously noted as l3
    ; Previous doors that have either been visited or are presumed to remain closed
    (closed_door corridor l1) ; The West patio door in the corridor is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom l7 - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south) ; South of the corridor is the bedroom based on the latest action\n    (connected bedroom corridor north) ; To the North of the bedroom is the corridor\n    (connected bedroom l7 west)        ; Placeholder for the unknown location behind the West door in the bedroom\n    (closed_door bedroom l7)           ; There's a closed wood door to the West in the bedroom\n    (connected corridor l1 west)       ; Placeholder for the unknown location behind the West patio door in the corridor, previously noted as l3\n    ; Previous doors that have either been visited or are presumed to remain closed\n    (closed_door corridor l1) ; The West patio door in the corridor is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/d0e5e118-0e57-4631-aa51-6d33e1926b0e?external=True'}
resp[] /check/d0e5e118-0e57-4631-aa51-6d33e1926b0e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L1 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom l7 - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south) ; South of the corridor is the bedroom
    (connected bedroom corridor north) ; North of the bedroom is the corridor
    (connected bedroom l7 west)       ; Placeholder for the unknown location behind the West door in the bedroom
    (closed_door bedroom l7)          ; There's a closed wood door to the West in the bedroom
    (connected corridor l3 west)      ; The West connection to a location with a patio door remains, but not explored
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom l7 - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south) ; South of the corridor is the bedroom\n    (connected bedroom corridor north) ; North of the bedroom is the corridor\n    (connected bedroom l7 west)       ; Placeholder for the unknown location behind the West door in the bedroom\n    (closed_door bedroom l7)          ; There's a closed wood door to the West in the bedroom\n    (connected corridor l3 west)      ; The West connection to a location with a patio door remains, but not explored\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/6588d091-bd6e-4df6-bb6c-cf7a887f61d3?external=True'}
resp[] /check/6588d091-bd6e-4df6-bb6c-cf7a887f61d3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L3 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom l5 - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south) ; The corridor's connection to the South is to the bedroom
    (connected bedroom corridor north) ; The North of the bedroom leads to the corridor
    (connected bedroom l5 west)        ; Placeholder for the unknown location behind the West door in the bedroom
    ; Previous doors have been opened and locations visited
    (closed_door bedroom l5) ; The West wood door in the bedroom is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south) ; The corridor's connection to the South is to the bedroom\n    (connected bedroom corridor north) ; The North of the bedroom leads to the corridor\n    (connected bedroom l5 west)        ; Placeholder for the unknown location behind the West door in the bedroom\n    ; Previous doors have been opened and locations visited\n    (closed_door bedroom l5) ; The West wood door in the bedroom is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/6085d931-e709-47fe-a795-683894a28dd0?external=True'}
resp[] /check/6085d931-e709-47fe-a795-683894a28dd0?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR BEDROOM L5)\n(MOVE BEDROOM L5 WEST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 13 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 13\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.19996e-05\nNodes generated during search: 7\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.19996e-05 secs\n'}
actions ['(open_door bedroom l5)', '(move bedroom l5 west)']
before map actions ['(open_door bedroom l5)', '(move bedroom l5 west)']
after map actions ['open door to west', 'move west']
> open door to west
Action: open door to west
You open the wood door, revealing the living room. 
Step 14
> move west
Action: move west
You are in the living room. To the North you see a closed screen door. Through an open wood door, to the East you see the bedroom. 
Step 15
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living_room - location
    north south east west - direction
  )
  (:init
    (at living_room)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living_room)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living_room west)
    (connected living_room bedroom east)
    ; New connection with the opened door
    (connected living_room l5 north) ; Placeholder for the unknown location behind the North screen door in the living room
    ; Previous doors have been opened and locations visited
    (closed_door living_room l5) ; The North screen door in the living room is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living_room - location\n    north south east west - direction\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living_room)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living_room west)\n    (connected living_room bedroom east)\n    ; New connection with the opened door\n    (connected living_room l5 north) ; Placeholder for the unknown location behind the North screen door in the living room\n    ; Previous doors have been opened and locations visited\n    (closed_door living_room l5) ; The North screen door in the living room is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/fb9d0dff-2e52-48aa-a479-06c352acd1be?external=True'}
resp[] /check/fb9d0dff-2e52-48aa-a479-06c352acd1be?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L5 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living l6 - location
    north south east west - direction
  )
  (:init
    (at living)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living west) ; The bedroom's West connection leads to the living room
    (connected living bedroom east) ; The East of the living room connects to the bedroom
    (connected living l6 north)     ; Placeholder for the unknown location behind the North screen door in the living room
    ; Previous doors have been opened and locations visited
    (closed_door living l6) ; The North screen door in the living room is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at living)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living west) ; The bedroom's West connection leads to the living room\n    (connected living bedroom east) ; The East of the living room connects to the bedroom\n    (connected living l6 north)     ; Placeholder for the unknown location behind the North screen door in the living room\n    ; Previous doors have been opened and locations visited\n    (closed_door living l6) ; The North screen door in the living room is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/f5f09bc2-6d75-45bd-a670-4086fe1fa0d6?external=True'}
resp[] /check/f5f09bc2-6d75-45bd-a670-4086fe1fa0d6?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING L6)\n(MOVE LIVING L6 NORTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 15 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 15\n\t#Fluents: 10\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.09991e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.09991e-05 secs\n'}
actions ['(open_door living l6)', '(move living l6 north)']
before map actions ['(open_door living l6)', '(move living l6 north)']
after map actions ['open door to north', 'move north']
> open door to north
Action: open door to north
You open the screen door, revealing the backyard. 
Step 16
> move north
Action: move north
You are in the backyard. To the North you see the driveway. Through an open screen door, to the South you see the living room. To the East you see a closed patio door. To the West you see the street. 
Step 17
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living backyard l7 l8 - location
    north south east west - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living)
    (visited backyard)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living west)
    (connected living bedroom east)
    (connected living backyard south)
    (connected backyard living south)
    (connected backyard l7 north) ; Placeholder for the unknown location behind the North towards the driveway
    (connected backyard l8 east) ; Placeholder for the unknown location behind the East patio door
    ; Presuming the street to the West is not a location in this context or it's not accessible
    (closed_door backyard l7) ; The North towards the driveway is currently a presumption
    (closed_door backyard l8) ; The East patio door in the backyard is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living backyard l7 l8 - location\n    north south east west - direction\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living)\n    (visited backyard)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living west)\n    (connected living bedroom east)\n    (connected living backyard south)\n    (connected backyard living south)\n    (connected backyard l7 north) ; Placeholder for the unknown location behind the North towards the driveway\n    (connected backyard l8 east) ; Placeholder for the unknown location behind the East patio door\n    ; Presuming the street to the West is not a location in this context or it's not accessible\n    (closed_door backyard l7) ; The North towards the driveway is currently a presumption\n    (closed_door backyard l8) ; The East patio door in the backyard is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/526df886-8ac1-41ee-bf9b-de3adfac39da?external=True'}
resp[] /check/526df886-8ac1-41ee-bf9b-de3adfac39da?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR BACKYARD L7)\n(MOVE BACKYARD L7 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 21 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 21\n\t#Fluents: 15\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 7.29994e-05\nNodes generated during search: 13\nNodes expanded during search: 7\nPlan found with cost: 3\nFast-BFS search completed in 7.29994e-05 secs\n'}
actions ['(open_door backyard l7)', '(move backyard l7 north)', '(reach-goal)']
before map actions ['(open_door backyard l7)', '(move backyard l7 north)']
after map actions ['open door to north', 'move north']
> open door to north
Action: open door to north
Unknown action: I'm not sure what you mean.
Step 18
> move north
Action: move north
You are in the driveway. To the South you see the backyard. 
Step 19
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living)
    (visited backyard)
    (visited driveway)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living west)
    (connected living bedroom east)
    (connected living backyard south)
    (connected backyard living south)
    (connected backyard driveway north)
    (connected driveway backyard south)
    (connected backyard l8 east) ; Preserved the placeholder for the unknown location behind the East patio door
    (closed_door backyard l8) ; The East patio door in the backyard is still closed
    ; No closed_door predicate for driveway as there was no action needed to open a door
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living)\n    (visited backyard)\n    (visited driveway)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living west)\n    (connected living bedroom east)\n    (connected living backyard south)\n    (connected backyard living south)\n    (connected backyard driveway north)\n    (connected driveway backyard south)\n    (connected backyard l8 east) ; Preserved the placeholder for the unknown location behind the East patio door\n    (closed_door backyard l8) ; The East patio door in the backyard is still closed\n    ; No closed_door predicate for driveway as there was no action needed to open a door\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/f7bae654-46e4-4a6a-9b5d-cf7dbb7010e7?external=True'}
resp[] /check/f7bae654-46e4-4a6a-9b5d-cf7dbb7010e7?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L8 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living)
    (visited backyard)
    (visited driveway)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living west)
    (connected living bedroom east)
    (connected living backyard south)
    (connected backyard living south)
    (connected backyard driveway north) ; Updated to reflect the connection to the driveway
    (connected driveway backyard south) ; The South of the driveway connects to the backyard
    (closed_door backyard l8) ; Maintain the East patio door in the backyard being closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living)\n    (visited backyard)\n    (visited driveway)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living west)\n    (connected living bedroom east)\n    (connected living backyard south)\n    (connected backyard living south)\n    (connected backyard driveway north) ; Updated to reflect the connection to the driveway\n    (connected driveway backyard south) ; The South of the driveway connects to the backyard\n    (closed_door backyard l8) ; Maintain the East patio door in the backyard being closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/5481335a-85f5-4040-b2da-474e2d9d38c6?external=True'}
resp[] /check/5481335a-85f5-4040-b2da-474e2d9d38c6?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L8 in literal CLOSED_DOOR. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited corridor)
    (visited bathroom)
    (visited laundry)
    (visited pantry)
    (visited bedroom)
    (visited living)
    (visited backyard)
    (visited driveway)
    (connected kitchen pantry east)
    (connected pantry kitchen west)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected bathroom corridor south)
    (connected bathroom laundry east)
    (connected laundry kitchen south)
    (connected laundry bathroom west)
    (connected corridor bedroom south)
    (connected bedroom corridor north)
    (connected bedroom living west)
    (connected living bedroom east)
    (connected living backyard south)
    (connected backyard living south)
    (connected backyard driveway north) ; Now we know the North connection from the backyard goes to the driveway
    (connected driveway backyard south) ; The South of the driveway leads back to the backyard
    ; Other connections from the backyard remain unknown or unexplored
    (closed_door backyard l8) ; The East patio door in the backyard is still closed
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor bathroom laundry pantry bedroom living backyard driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited corridor)\n    (visited bathroom)\n    (visited laundry)\n    (visited pantry)\n    (visited bedroom)\n    (visited living)\n    (visited backyard)\n    (visited driveway)\n    (connected kitchen pantry east)\n    (connected pantry kitchen west)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected bathroom corridor south)\n    (connected bathroom laundry east)\n    (connected laundry kitchen south)\n    (connected laundry bathroom west)\n    (connected corridor bedroom south)\n    (connected bedroom corridor north)\n    (connected bedroom living west)\n    (connected living bedroom east)\n    (connected living backyard south)\n    (connected backyard living south)\n    (connected backyard driveway north) ; Now we know the North connection from the backyard goes to the driveway\n    (connected driveway backyard south) ; The South of the driveway leads back to the backyard\n    ; Other connections from the backyard remain unknown or unexplored\n    (closed_door backyard l8) ; The East patio door in the backyard is still closed\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/e3157f40-7783-423f-9dd3-17afbcb175f2?external=True'}
resp[] /check/e3157f40-7783-423f-9dd3-17afbcb175f2?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L8 in literal CLOSED_DOOR. check input files\n\n'}
actions []
No plan found. Retrying...
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed patio door. To the West you see a closed plain door. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the South you see a closed patio door. To the West you see a closed plain door. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the South you see a closed patio door. To the West you see a closed plain door. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['look around', 'close door to west', 'move west', 'open door to south', 'open door to west', 'inventory', 'move south', 'close door to south'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to south', 'open door to west', 'move west', 'move east', 'move south', 'open door to west', 'move west', 'open door to south', 'move east', 'move south', 'move north', 'move west', 'move east', 'move east', 'open door to north', 'move north', 'take coin']
Action: look around
You are in the kitchen. To the South you see a closed patio door. To the West you see a closed plain door. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen l2 l3 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l2 south)
    (connected kitchen l3 west)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen l2 l3 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l2 south)\n    (connected kitchen l3 west)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/c0cd7731-2aaa-4150-bbb2-27b2a899bfc2?external=True'}
resp[] /check/c0cd7731-2aaa-4150-bbb2-27b2a899bfc2?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR KITCHEN L3)\n(MOVE KITCHEN L3 WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 6 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 6\n\t#Fluents: 8\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 7.00009e-05\nNodes generated during search: 7\nNodes expanded during search: 4\nPlan found with cost: 3\nFast-BFS search completed in 7.00009e-05 secs\n'}
actions ['(open_door kitchen l3)', '(move kitchen l3 west)', '(reach-goal)']
before map actions ['(open_door kitchen l3)', '(move kitchen l3 west)']
after map actions ['open door to west', 'move west']
> open door to west
Action: open door to west
You open the plain door, revealing the pantry. 
Step 1
> move west
Action: move west
You are in the pantry. Through an open plain door, to the East you see the kitchen. 
Step 2
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry - location
    north south east west - direction
  )
  (:init
    (at pantry)
    (visited kitchen) ; Adding kitchen to visited since we started there
    (visited pantry) ; Adding pantry to visited since we moved there
    (connected kitchen pantry west)
    (connected pantry kitchen east) ; Adding connection from pantry to kitchen
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry - location\n    north south east west - direction\n  )\n  (:init\n    (at pantry)\n    (visited kitchen) ; Adding kitchen to visited since we started there\n    (visited pantry) ; Adding pantry to visited since we moved there\n    (connected kitchen pantry west)\n    (connected pantry kitchen east) ; Adding connection from pantry to kitchen\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/60d55a71-00b0-45f2-b3ce-ed89e2964be1?external=True'}
resp[] /check/60d55a71-00b0-45f2-b3ce-ed89e2964be1?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry - location
    north south east west - direction
  )
  (:init
    (at pantry)
    (visited kitchen)
    (visited pantry)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry - location\n    north south east west - direction\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (visited pantry)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/523682b5-e37e-4b1d-a3e7-21963bf5d424?external=True'}
resp[] /check/523682b5-e37e-4b1d-a3e7-21963bf5d424?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry l2 - location
    north south east west - direction
  )
  (:init
    (at pantry)
    (visited kitchen)
    (visited pantry)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen l2 south)
    (closed_door kitchen l2)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry l2 - location\n    north south east west - direction\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (visited pantry)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen l2 south)\n    (closed_door kitchen l2)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/f4654c9e-c349-4e64-8a8e-0717965a7bf7?external=True'}
resp[] /check/f4654c9e-c349-4e64-8a8e-0717965a7bf7?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE PANTRY KITCHEN EAST)\n(OPEN_DOOR KITCHEN L2)\n(MOVE KITCHEN L2 SOUTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 4 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 4\n\t#Fluents: 5\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.59995e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 3\nFast-BFS search completed in 6.59995e-05 secs\n'}
actions ['(move pantry kitchen east)', '(open_door kitchen l2)', '(move kitchen l2 south)']
before map actions ['(move pantry kitchen east)', '(open_door kitchen l2)', '(move kitchen l2 south)']
after map actions ['move east', 'open door to south', 'move south']
> move east
Action: move east
You are in the kitchen. To the South you see a closed patio door. Through an open plain door, to the West you see the pantry. 
Step 3
> open door to south
Action: open door to south
You open the patio door, revealing the backyard. 
Step 4
> move south
Action: move south
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 
Step 5
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard l4 l5 l6 - location
    north south east west - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard l4 south) ; assuming l4 is the driveway
    (connected backyard l5 east) ; assuming l5 is the street
    (connected backyard l6 west) ; assuming l6 is the location beyond the closed patio door
    (closed_door backyard l6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard l4 l5 l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard l4 south) ; assuming l4 is the driveway\n    (connected backyard l5 east) ; assuming l5 is the street\n    (connected backyard l6 west) ; assuming l6 is the location beyond the closed patio door\n    (closed_door backyard l6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8fd7214b-37e7-4207-b365-3aa283c13f6e?external=True'}
resp[] /check/8fd7214b-37e7-4207-b365-3aa283c13f6e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD L5 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 0.000118\nNodes generated during search: 7\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 0.000118 secs\n'}
actions ['(move backyard l5 east)', '(reach-goal)']
before map actions ['(move backyard l5 east)']
after map actions ['move east']
> move east
Action: move east
You are in the street. To the North you see a closed sliding door. To the West you see the backyard. 
Step 6
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street l4 l6 l7 - location
    north south east west - direction
  )
  (:init
    (at street)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard l4 south) ; driveway
    (connected backyard l6 west) ; location beyond the closed patio door
    (connected backyard street east)
    (connected street backyard west)
    (connected street l7 north) ; assuming l7 is the location beyond the sliding door
    (closed_door street l7)
    (closed_door backyard l6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street l4 l6 l7 - location\n    north south east west - direction\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard l4 south) ; driveway\n    (connected backyard l6 west) ; location beyond the closed patio door\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected street l7 north) ; assuming l7 is the location beyond the sliding door\n    (closed_door street l7)\n    (closed_door backyard l6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/4dbb53a3-729f-4e85-8f21-6451738f7ae3?external=True'}
resp[] /check/4dbb53a3-729f-4e85-8f21-6451738f7ae3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE STREET BACKYARD WEST)\n(MOVE BACKYARD L4 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 14 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 14\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 6.50009e-05\nNodes generated during search: 9\nNodes expanded during search: 4\nPlan found with cost: 3\nFast-BFS search completed in 6.50009e-05 secs\n'}
actions ['(move street backyard west)', '(move backyard l4 south)', '(reach-goal)']
before map actions ['(move street backyard west)', '(move backyard l4 south)']
after map actions ['move west', 'move south']
> move west
Action: move west
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 
Step 7
> move south
Action: move south
You are in the driveway. To the North you see the backyard. 
Step 8
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway l6 - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard l6 west) ; location beyond the closed patio door
    (closed_door backyard l6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard l6 west) ; location beyond the closed patio door\n    (closed_door backyard l6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/6140421c-1275-429c-8449-d3c93b119fda?external=True'}
resp[] /check/6140421c-1275-429c-8449-d3c93b119fda?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE DRIVEWAY BACKYARD NORTH)\n(OPEN_DOOR BACKYARD L6)\n(MOVE BACKYARD L6 WEST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 9 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 9\n\t#Fluents: 8\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.19991e-05\nNodes generated during search: 9\nNodes expanded during search: 5\nPlan found with cost: 3\nFast-BFS search completed in 6.19991e-05 secs\n'}
actions ['(move driveway backyard north)', '(open_door backyard l6)', '(move backyard l6 west)']
before map actions ['(move driveway backyard north)', '(open_door backyard l6)', '(move backyard l6 west)']
after map actions ['move north', 'open door to west', 'move west']
> move north
Action: move north
You are in the backyard. Through an open patio door, to the North you see the kitchen. To the South you see the driveway. To the East you see the street. To the West you see a closed patio door. 
Step 9
> open door to west
Action: open door to west
You open the patio door, revealing the living room. 
Step 10
> move west
Action: move west
You are in the living room. To the South you see a closed wood door. Through an open patio door, to the East you see the backyard. 
Step 11
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room l8 - location
    north south east west - direction
  )
  (:init
    (at living_room)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room l8 south) ; assuming l8 is the location beyond the closed wood door
    (closed_door living_room l8)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room l8 - location\n    north south east west - direction\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room l8 south) ; assuming l8 is the location beyond the closed wood door\n    (closed_door living_room l8)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/07b02b43-0014-46a8-9d41-c228ec0e1d9d?external=True'}
resp[] /check/07b02b43-0014-46a8-9d41-c228ec0e1d9d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM L8)\n(MOVE LIVING_ROOM L8 SOUTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 10 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 10\n\t#Fluents: 8\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.59995e-05\nNodes generated during search: 7\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.59995e-05 secs\n'}
actions ['(open_door living_room l8)', '(move living_room l8 south)']
before map actions ['(open_door living_room l8)', '(move living_room l8 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the wood door, revealing the bathroom. 
Step 12
> move south
Action: move south
You are in the bathroom. Through an open wood door, to the North you see the living room. To the South you see a closed wood door. To the West you see a closed wood door. 
Step 13
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom l9 l10 - location
    north south east west - direction
  )
  (:init
    (at bathroom)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected bathroom l9 south) ; assuming l9 is the location beyond the closed wood door to the south
    (connected bathroom l10 west) ; assuming l10 is the location beyond the closed wood door to the west
    (closed_door bathroom l9)
    (closed_door bathroom l10)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom l9 l10 - location\n    north south east west - direction\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected bathroom l9 south) ; assuming l9 is the location beyond the closed wood door to the south\n    (connected bathroom l10 west) ; assuming l10 is the location beyond the closed wood door to the west\n    (closed_door bathroom l9)\n    (closed_door bathroom l10)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/b7a7fae7-5f25-4291-92c8-ecbf7eddd4b0?external=True'}
resp[] /check/b7a7fae7-5f25-4291-92c8-ecbf7eddd4b0?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR BATHROOM L9)\n(MOVE BATHROOM L9 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 16 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 16\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 7.00004e-05\nNodes generated during search: 13\nNodes expanded during search: 7\nPlan found with cost: 3\nFast-BFS search completed in 7.00004e-05 secs\n'}
actions ['(open_door bathroom l9)', '(move bathroom l9 south)', '(reach-goal)']
before map actions ['(open_door bathroom l9)', '(move bathroom l9 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the wood door, revealing the laundry room. 
Step 14
> move south
Action: move south
You are in the laundry room. Through an open wood door, to the North you see the bathroom. 
Step 15
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom laundry_room l10 - location
    north south east west - direction
  )
  (:init
    (at laundry_room)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (visited laundry_room)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected bathroom laundry_room south)
    (connected laundry_room bathroom north)
    (connected bathroom l10 west) ; assuming l10 is the location beyond the closed wood door to the west
    (closed_door bathroom l10)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom laundry_room l10 - location\n    north south east west - direction\n  )\n  (:init\n    (at laundry_room)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (visited laundry_room)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected bathroom laundry_room south)\n    (connected laundry_room bathroom north)\n    (connected bathroom l10 west) ; assuming l10 is the location beyond the closed wood door to the west\n    (closed_door bathroom l10)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/776901cc-ee4b-4046-8465-49ccd0bce7dd?external=True'}
resp[] /check/776901cc-ee4b-4046-8465-49ccd0bce7dd?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LAUNDRY_ROOM BATHROOM NORTH)\n(OPEN_DOOR BATHROOM L10)\n(MOVE BATHROOM L10 WEST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 14 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 14\n\t#Fluents: 10\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.99997e-05\nNodes generated during search: 9\nNodes expanded during search: 4\nPlan found with cost: 3\nFast-BFS search completed in 6.99997e-05 secs\n'}
actions ['(move laundry_room bathroom north)', '(open_door bathroom l10)', '(move bathroom l10 west)']
before map actions ['(move laundry_room bathroom north)', '(open_door bathroom l10)', '(move bathroom l10 west)']
after map actions ['move north', 'open door to west', 'move west']
> move north
Action: move north
You are in the bathroom. Through an open wood door, to the North you see the living room. Through an open wood door, to the South you see the laundry room. To the West you see a closed wood door. 
Step 16
> open door to west
Action: open door to west
You open the wood door, revealing the corridor. 
Step 17
> move west
Action: move west
You are in the corridor. Through an open wood door, to the East you see the bathroom. To the West you see a closed wood door. 
Step 18
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor l11 - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (visited laundry_room)
    (visited corridor)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected laundry_room bathroom north)
    (connected bathroom corridor west)
    (connected corridor bathroom east)
    (connected corridor l11 west) ; assuming l11 is the location beyond the closed wood door to the west
    (closed_door corridor l11)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor l11 - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (visited laundry_room)\n    (visited corridor)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected laundry_room bathroom north)\n    (connected bathroom corridor west)\n    (connected corridor bathroom east)\n    (connected corridor l11 west) ; assuming l11 is the location beyond the closed wood door to the west\n    (closed_door corridor l11)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/277c48f2-76f8-4254-bc01-9d03d1a894cb?external=True'}
resp[] /check/277c48f2-76f8-4254-bc01-9d03d1a894cb?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR CORRIDOR L11)\n(MOVE CORRIDOR L11 WEST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 14 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 14\n\t#Fluents: 10\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.49996e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.49996e-05 secs\n'}
actions ['(open_door corridor l11)', '(move corridor l11 west)']
before map actions ['(open_door corridor l11)', '(move corridor l11 west)']
after map actions ['open door to west', 'move west']
> open door to west
Action: open door to west
You open the wood door, revealing the bedroom. 
Step 19
> move west
Action: move west
You are in the bedroom. Through an open wood door, to the East you see the corridor. 
Step 20
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (visited laundry_room)
    (visited corridor)
    (visited bedroom)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected laundry_room bathroom north)
    (connected bathroom corridor west)
    (connected corridor bathroom east)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (visited laundry_room)\n    (visited corridor)\n    (visited bedroom)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected laundry_room bathroom north)\n    (connected bathroom corridor west)\n    (connected corridor bathroom east)\n    (connected corridor bedroom west)\n    (connected bedroom corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/59a96853-86ba-457f-8850-1752d546ba15?external=True'}
resp[] /check/59a96853-86ba-457f-8850-1752d546ba15?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (visited laundry_room)
    (visited corridor)
    (visited bedroom)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected laundry_room bathroom north)
    (connected bathroom corridor west)
    (connected corridor bathroom east)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (visited laundry_room)\n    (visited corridor)\n    (visited bedroom)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected laundry_room bathroom north)\n    (connected bathroom corridor west)\n    (connected corridor bathroom east)\n    (connected corridor bedroom west)\n    (connected bedroom corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2679b2ae-4747-451b-8102-1b45f56cf134?external=True'}
resp[] /check/2679b2ae-4747-451b-8102-1b45f56cf134?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location
    north south east west - direction
  )
  (:init
    (at bedroom)
    (visited kitchen)
    (visited pantry)
    (visited backyard)
    (visited street)
    (visited driveway)
    (visited living_room)
    (visited bathroom)
    (visited laundry_room)
    (visited corridor)
    (visited bedroom)
    (connected kitchen pantry west)
    (connected pantry kitchen east)
    (connected kitchen backyard south)
    (connected backyard kitchen north)
    (connected backyard street east)
    (connected street backyard west)
    (connected driveway backyard north)
    (connected backyard living_room west)
    (connected living_room backyard east)
    (connected living_room bathroom south)
    (connected bathroom living_room north)
    (connected laundry_room bathroom north)
    (connected bathroom corridor west)
    (connected corridor bathroom east)
    (connected corridor bedroom west)
    (connected bedroom corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen pantry backyard street driveway living_room bathroom laundry_room corridor bedroom - location\n    north south east west - direction\n  )\n  (:init\n    (at bedroom)\n    (visited kitchen)\n    (visited pantry)\n    (visited backyard)\n    (visited street)\n    (visited driveway)\n    (visited living_room)\n    (visited bathroom)\n    (visited laundry_room)\n    (visited corridor)\n    (visited bedroom)\n    (connected kitchen pantry west)\n    (connected pantry kitchen east)\n    (connected kitchen backyard south)\n    (connected backyard kitchen north)\n    (connected backyard street east)\n    (connected street backyard west)\n    (connected driveway backyard north)\n    (connected backyard living_room west)\n    (connected living_room backyard east)\n    (connected living_room bathroom south)\n    (connected bathroom living_room north)\n    (connected laundry_room bathroom north)\n    (connected bathroom corridor west)\n    (connected corridor bathroom east)\n    (connected corridor bedroom west)\n    (connected bedroom corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/0ff10c1b-3dfd-4c3a-b8e5-95e978d163d0?external=True'}
resp[] /check/0ff10c1b-3dfd-4c3a-b8e5-95e978d163d0?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'open door to west', 'move south', 'open door to east', 'inventory', 'close door to south', 'close door to west', 'move west', 'move north', 'close door to east', 'open door to south', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to south', 'open door to east', 'open door to west', 'move north', 'open door to east', 'move west', 'open door to north', 'open door to south', 'move north', 'move south', 'move south', 'move north', 'move east', 'move east', 'move west', 'move west', 'move west', 'take coin']
Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room south_location east_location west_location - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen south_location south)
    (connected kitchen east_location east)
    (connected kitchen west_location west)
    (closed_door kitchen south_location)
    (closed_door kitchen east_location)
    (closed_door kitchen west_location)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room south_location east_location west_location - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen living_room north)\n    (connected kitchen south_location south)\n    (connected kitchen east_location east)\n    (connected kitchen west_location west)\n    (closed_door kitchen south_location)\n    (closed_door kitchen east_location)\n    (closed_door kitchen west_location)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/cdebff7b-4935-4b46-87ea-c7adffa3015d?external=True'}
resp[] /check/cdebff7b-4935-4b46-87ea-c7adffa3015d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LIVING_ROOM NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.69998e-05\nNodes generated during search: 6\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 5.69998e-05 secs\n'}
actions ['(move kitchen living_room north)', '(reach-goal)']
before map actions ['(move kitchen living_room north)']
after map actions ['move north']
> move north
Action: move north
You are in the living room. To the South you see the kitchen. To the East you see a closed wood door. To the West you see the corridor. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room east_location corridor - location
    north south east west - direction
  )
  (:init
    (at living_room)
    (visited living_room)
    (connected living_room kitchen south)
    (connected living_room east_location east)
    (connected living_room corridor west)
    (closed_door living_room east_location)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room east_location corridor - location\n    north south east west - direction\n  )\n  (:init\n    (at living_room)\n    (visited living_room)\n    (connected living_room kitchen south)\n    (connected living_room east_location east)\n    (connected living_room corridor west)\n    (closed_door living_room east_location)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/4f157ced-9c7b-40a7-a2d4-c9c79baab7fc?external=True'}
resp[] /check/4f157ced-9c7b-40a7-a2d4-c9c79baab7fc?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LIVING_ROOM KITCHEN SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 7 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 7\n\t#Fluents: 7\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.69997e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 5.69997e-05 secs\n'}
actions ['(move living_room kitchen south)', '(reach-goal)']
before map actions ['(move living_room kitchen south)']
after map actions ['move south']
> move south
Action: move south
You are in the kitchen. To the North you see the living room. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. 
Step 2
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room south_location east_location west_location corridor - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (visited living_room)     ;; Since we visited the living room before.
    (connected kitchen living_room north)
    (connected kitchen south_location south)
    (connected kitchen east_location east)
    (connected kitchen west_location west)
    (connected living_room kitchen south)
    (connected living_room east_location east)
    (connected living_room corridor west)
    (closed_door kitchen south_location)
    (closed_door kitchen east_location)
    (closed_door kitchen west_location)
    (closed_door living_room east_location)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room south_location east_location west_location corridor - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (visited living_room)     ;; Since we visited the living room before.\n    (connected kitchen living_room north)\n    (connected kitchen south_location south)\n    (connected kitchen east_location east)\n    (connected kitchen west_location west)\n    (connected living_room kitchen south)\n    (connected living_room east_location east)\n    (connected living_room corridor west)\n    (closed_door kitchen south_location)\n    (closed_door kitchen east_location)\n    (closed_door kitchen west_location)\n    (closed_door living_room east_location)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/c6f4c9c9-c134-4735-bb86-690340a49c45?external=True'}
resp[] /check/c6f4c9c9-c134-4735-bb86-690340a49c45?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR KITCHEN SOUTH_LOCATION)\n(MOVE KITCHEN SOUTH_LOCATION SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 15 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 15\n\t#Fluents: 15\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 6.69993e-05\nNodes generated during search: 14\nNodes expanded during search: 7\nPlan found with cost: 3\nFast-BFS search completed in 6.69993e-05 secs\n'}
actions ['(open_door kitchen south_location)', '(move kitchen south_location south)', '(reach-goal)']
before map actions ['(open_door kitchen south_location)', '(move kitchen south_location south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the wood door, revealing the laundry room. 
Step 3
> move south
Action: move south
You are in the laundry room. Through an open wood door, to the North you see the kitchen. 
Step 4
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room laundry_room east_location west_location corridor - location
    north south east west - direction
  )
  (:init
    (at laundry_room)
    (visited kitchen)
    (visited living_room)
    (visited laundry_room)
    (connected kitchen living_room north)
    (connected kitchen laundry_room south)
    (connected kitchen east_location east)
    (connected kitchen west_location west)
    (connected living_room kitchen south)
    (connected living_room east_location east)
    (connected living_room corridor west)
    (connected laundry_room kitchen north)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room laundry_room east_location west_location corridor - location\n    north south east west - direction\n  )\n  (:init\n    (at laundry_room)\n    (visited kitchen)\n    (visited living_room)\n    (visited laundry_room)\n    (connected kitchen living_room north)\n    (connected kitchen laundry_room south)\n    (connected kitchen east_location east)\n    (connected kitchen west_location west)\n    (connected living_room kitchen south)\n    (connected living_room east_location east)\n    (connected living_room corridor west)\n    (connected laundry_room kitchen north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/b12c5dcc-d983-4187-a190-168457d8704d?external=True'}
resp[] /check/b12c5dcc-d983-4187-a190-168457d8704d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LAUNDRY_ROOM KITCHEN NORTH)\n(MOVE KITCHEN EAST_LOCATION EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 7\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.90003e-05\nNodes generated during search: 8\nNodes expanded during search: 4\nPlan found with cost: 3\nFast-BFS search completed in 6.90003e-05 secs\n'}
actions ['(move laundry_room kitchen north)', '(move kitchen east_location east)', '(reach-goal)']
before map actions ['(move laundry_room kitchen north)', '(move kitchen east_location east)']
after map actions ['move north', 'move east']
> move north
Action: move north
You are in the kitchen. To the North you see the living room. Through an open wood door, to the South you see the laundry room. To the East you see a closed frosted-glass door. To the West you see a closed sliding patio door. 
Step 5
> move east
Action: move east
You can't move there, the door is closed. 
Step 6
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room laundry_room east_location west_location corridor - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (visited living_room)     ;; Since we have been in the living room before.
    (visited laundry_room)    ;; Since we have been in the laundry room before.
    (connected kitchen living_room north)
    (connected kitchen laundry_room south)
    (connected kitchen east_location east)
    (connected kitchen west_location west)
    (connected living_room kitchen south)
    (connected living_room east_location east)
    (connected living_room corridor west)
    (connected laundry_room kitchen north)
    (closed_door kitchen east_location)    ;; Since the east door is closed and we couldn't move there.
    (closed_door kitchen west_location)    ;; Assuming the west door remains closed as initially observed.
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room laundry_room east_location west_location corridor - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (visited living_room)     ;; Since we have been in the living room before.\n    (visited laundry_room)    ;; Since we have been in the laundry room before.\n    (connected kitchen living_room north)\n    (connected kitchen laundry_room south)\n    (connected kitchen east_location east)\n    (connected kitchen west_location west)\n    (connected living_room kitchen south)\n    (connected living_room east_location east)\n    (connected living_room corridor west)\n    (connected laundry_room kitchen north)\n    (closed_door kitchen east_location)    ;; Since the east door is closed and we couldn't move there.\n    (closed_door kitchen west_location)    ;; Assuming the west door remains closed as initially observed.\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)"}
Output of job request {'result': '/check/9b85e39e-c62b-45a8-94ce-c80eb33a5ea9?external=True'}
resp[] /check/9b85e39e-c62b-45a8-94ce-c80eb33a5ea9?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LIVING_ROOM NORTH)\n(MOVE LIVING_ROOM CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 13 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 13\n\t#Fluents: 11\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 7.09999e-05\nNodes generated during search: 12\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 7.09999e-05 secs\n'}
actions ['(move kitchen living_room north)', '(move living_room corridor west)', '(reach-goal)']
before map actions ['(move kitchen living_room north)', '(move living_room corridor west)']
after map actions ['move north', 'move west']
> move north
Action: move north
You are in the living room. To the South you see the kitchen. To the East you see a closed wood door. To the West you see the corridor. 
Step 7
> move west
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed screen door. To the East you see the living room. To the West you see the driveway. 
Step 8
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room laundry_room east_location west_location corridor north_corridor_location south_corridor_location driveway - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited living_room)
    (visited laundry_room)
    (visited corridor)
    (connected kitchen living_room north)
    (connected kitchen laundry_room south)
    (connected kitchen east_location east)
    (connected kitchen west_location west)
    (connected living_room kitchen south)
    (connected living_room east_location east)
    (connected living_room corridor west)
    (connected laundry_room kitchen north)
    (connected corridor north_corridor_location north)
    (connected corridor south_corridor_location south)
    (connected corridor living_room east)
    (connected corridor driveway west)
    (closed_door kitchen east_location)
    (closed_door kitchen west_location)
    (closed_door living_room east_location)
    (closed_door corridor north_corridor_location)
    (closed_door corridor south_corridor_location)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room laundry_room east_location west_location corridor north_corridor_location south_corridor_location driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited living_room)\n    (visited laundry_room)\n    (visited corridor)\n    (connected kitchen living_room north)\n    (connected kitchen laundry_room south)\n    (connected kitchen east_location east)\n    (connected kitchen west_location west)\n    (connected living_room kitchen south)\n    (connected living_room east_location east)\n    (connected living_room corridor west)\n    (connected laundry_room kitchen north)\n    (connected corridor north_corridor_location north)\n    (connected corridor south_corridor_location south)\n    (connected corridor living_room east)\n    (connected corridor driveway west)\n    (closed_door kitchen east_location)\n    (closed_door kitchen west_location)\n    (closed_door living_room east_location)\n    (closed_door corridor north_corridor_location)\n    (closed_door corridor south_corridor_location)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/9ff6a505-b424-41e3-bfa0-7c0bb1b688de?external=True'}
resp[] /check/9ff6a505-b424-41e3-bfa0-7c0bb1b688de?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR DRIVEWAY WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 22 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 22\n\t#Fluents: 20\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.10002e-05\nNodes generated during search: 12\nNodes expanded during search: 5\nPlan found with cost: 2\nFast-BFS search completed in 6.10002e-05 secs\n'}
actions ['(move corridor driveway west)', '(reach-goal)']
before map actions ['(move corridor driveway west)']
after map actions ['move west']
> move west
Action: move west
You are in the driveway. To the South you see the street. To the East you see the corridor. 
Step 9
> take coin
Action: take coin
You take the coin.
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. 
To the North you see a closed plain door. To the South you see a closed wood door. To the East you see a closed screen door. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. \nTo the North you see a closed plain door. To the South you see a closed wood door. To the East you see a closed screen door. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. \nTo the North you see a closed plain door. To the South you see a closed wood door. To the East you see a closed screen door. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'close door to east', 'move south', 'close door to south', 'inventory', 'open door to south', 'take coin', 'open door to north', 'move north', 'open door to east', 'close door to north', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed plain door. To the South you see a closed wood door. To the East you see a closed screen door. 
Step 0
> take coin
Action: take coin
You take the coin.
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see a closed sliding patio door. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed sliding patio door. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed sliding patio door. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'open door to east', 'move south', 'open door to south', 'inventory', 'close door to north', 'close door to east', 'move west', 'move north', 'close door to south', 'open door to north', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to north', 'open door to south', 'open door to east', 'move east', 'move west', 'move south', 'move north', 'move east', 'move west', 'move west', 'open door to north', 'open door to west', 'move east', 'move north', 'move south', 'move north', 'move south', 'move east', 'move west', 'move west', 'move east', 'move south', 'move north', 'move south', 'move north', 'move west', 'move west', 'open door to north', 'move north', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed sliding patio door. To the South you see a closed wood door. To the East you see a closed frosted-glass door. To the West you see the corridor. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 l3 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l1 north)
    (connected kitchen l2 south)
    (connected kitchen l3 east)
    (connected kitchen corridor west)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 l3 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l1 north)\n    (connected kitchen l2 south)\n    (connected kitchen l3 east)\n    (connected kitchen corridor west)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/24657625-bfde-4652-a2a8-c79ffa2c9118?external=True'}
resp[] /check/24657625-bfde-4652-a2a8-c79ffa2c9118?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.89991e-05\nNodes generated during search: 6\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.89991e-05 secs\n'}
actions ['(move kitchen corridor west)', '(reach-goal)']
before map actions ['(move kitchen corridor west)']
after map actions ['move west']
> move west
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see the driveway. To the East you see the kitchen. To the West you see a closed wood door. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 l3 l4 driveway - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen l1 north)
    (connected kitchen l2 south)
    (connected kitchen l3 east)
    (connected kitchen corridor west)
    (connected corridor l4 north)
    (connected corridor driveway south)
    (connected corridor kitchen east)
    (connected corridor l5 west)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
    (closed_door corridor l4)
    (closed_door corridor l5)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 l3 l4 driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited corridor)\n    (connected kitchen l1 north)\n    (connected kitchen l2 south)\n    (connected kitchen l3 east)\n    (connected kitchen corridor west)\n    (connected corridor l4 north)\n    (connected corridor driveway south)\n    (connected corridor kitchen east)\n    (connected corridor l5 west)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n    (closed_door corridor l4)\n    (closed_door corridor l5)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/b585533f-d18d-43d0-8f39-04c61a54a033?external=True'}
resp[] /check/b585533f-d18d-43d0-8f39-04c61a54a033?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant L5 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor driveway l1 l2 l3 l4 l5 - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen l1 north)
    (connected kitchen l2 south)
    (connected kitchen l3 east)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor l4 north)
    (connected corridor driveway south)
    (connected corridor l5 west)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
    (closed_door corridor l4)
    (closed_door corridor l5)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor driveway l1 l2 l3 l4 l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited corridor)\n    (connected kitchen l1 north)\n    (connected kitchen l2 south)\n    (connected kitchen l3 east)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor l4 north)\n    (connected corridor driveway south)\n    (connected corridor l5 west)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n    (closed_door corridor l4)\n    (closed_door corridor l5)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/2f563c15-e07f-4d49-9d91-eff3b1baeb89?external=True'}
resp[] /check/2f563c15-e07f-4d49-9d91-eff3b1baeb89?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR DRIVEWAY SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 19 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 19\n\t#Fluents: 19\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.40003e-05\nNodes generated during search: 13\nNodes expanded during search: 5\nPlan found with cost: 2\nFast-BFS search completed in 6.40003e-05 secs\n'}
actions ['(move corridor driveway south)', '(reach-goal)']
before map actions ['(move corridor driveway south)']
after map actions ['move south']
> move south
Action: move south
You are in the driveway. To the North you see the corridor. 
Step 2
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor driveway l1 l2 l3 l4 l5 - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited corridor)
    (visited driveway)
    (connected kitchen l1 north)
    (connected kitchen l2 south)
    (connected kitchen l3 east)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor l4 north)
    (connected corridor driveway south)
    (connected corridor l5 west)
    (connected driveway corridor north)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
    (closed_door corridor l4)
    (closed_door corridor l5)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor driveway l1 l2 l3 l4 l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited corridor)\n    (visited driveway)\n    (connected kitchen l1 north)\n    (connected kitchen l2 south)\n    (connected kitchen l3 east)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor l4 north)\n    (connected corridor driveway south)\n    (connected corridor l5 west)\n    (connected driveway corridor north)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n    (closed_door corridor l4)\n    (closed_door corridor l5)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/95bf442c-3a79-47e8-a279-61520331a22d?external=True'}
resp[] /check/95bf442c-3a79-47e8-a279-61520331a22d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE DRIVEWAY CORRIDOR NORTH)\n(OPEN_DOOR CORRIDOR L4)\n(MOVE CORRIDOR L4 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 19 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 19\n\t#Fluents: 19\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.39995e-05\nNodes generated during search: 16\nNodes expanded during search: 8\nPlan found with cost: 4\nFast-BFS search completed in 8.39995e-05 secs\n'}
actions ['(move driveway corridor north)', '(open_door corridor l4)', '(move corridor l4 north)', '(reach-goal)']
before map actions ['(move driveway corridor north)', '(open_door corridor l4)', '(move corridor l4 north)']
after map actions ['move north', 'open door to north', 'move north']
> move north
Action: move north
You are in the corridor. To the North you see a closed wood door. To the South you see the driveway. To the East you see the kitchen. To the West you see a closed wood door. 
Step 3
> open door to north
Action: open door to north
You open the wood door, revealing the bathroom. 
Step 4
> move north
Action: move north
You are in the bathroom. Through an open wood door, to the South you see the corridor. To the West you see a closed wood door. 
Step 5
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor driveway bathroom l1 l2 l3 l5 l6 - location
    north south east west - direction
  )
  (:init
    (at bathroom)
    (visited kitchen)
    (visited corridor)
    (visited driveway)
    (visited bathroom)
    (connected kitchen l1 north)
    (connected kitchen l2 south)
    (connected kitchen l3 east)
    (connected kitchen corridor west)
    (connected corridor kitchen east)
    (connected corridor bathroom north)
    (connected corridor driveway south)
    (connected corridor l5 west)
    (connected driveway corridor north)
    (connected bathroom corridor south)
    (connected bathroom l6 west)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
    (closed_door kitchen l3)
    (closed_door corridor l5)
    (closed_door bathroom l6)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor driveway bathroom l1 l2 l3 l5 l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at bathroom)\n    (visited kitchen)\n    (visited corridor)\n    (visited driveway)\n    (visited bathroom)\n    (connected kitchen l1 north)\n    (connected kitchen l2 south)\n    (connected kitchen l3 east)\n    (connected kitchen corridor west)\n    (connected corridor kitchen east)\n    (connected corridor bathroom north)\n    (connected corridor driveway south)\n    (connected corridor l5 west)\n    (connected driveway corridor north)\n    (connected bathroom corridor south)\n    (connected bathroom l6 west)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n    (closed_door kitchen l3)\n    (closed_door corridor l5)\n    (closed_door bathroom l6)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/7c1ae1e3-6837-4fee-961f-408bf9ac63c3?external=True'}
resp[] /check/7c1ae1e3-6837-4fee-961f-408bf9ac63c3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR BATHROOM L6)\n(MOVE BATHROOM L6 WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 21 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 21\n\t#Fluents: 20\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 7.10008e-05\nNodes generated during search: 10\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 7.10008e-05 secs\n'}
actions ['(open_door bathroom l6)', '(move bathroom l6 west)', '(reach-goal)']
before map actions ['(open_door bathroom l6)', '(move bathroom l6 west)']
after map actions ['open door to west', 'move west']
> open door to west
Action: open door to west
You open the wood door, revealing the living room. 
Step 6
> move west
Action: move west
You are in the living room. To the South you see a closed wood door. Through an open wood door, to the East you see the bathroom. 
Step 7
> take coin
Action: take coin
You take the coin.
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see a closed wood door. To the South you see a closed patio door. To the East you see the living room. To the West you see a closed frosted-glass door. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the South you see a closed patio door. To the East you see the living room. To the West you see a closed frosted-glass door. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the South you see a closed patio door. To the East you see the living room. To the West you see a closed frosted-glass door. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'open door to west', 'move south', 'open door to south', 'inventory', 'close door to north', 'close door to west', 'move west', 'move north', 'close door to south', 'open door to north', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to north', 'open door to south', 'open door to west', 'move north', 'open door to west', 'move west', 'open door to west', 'move east', 'move south', 'move east', 'open door to east', 'move east', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed wood door. To the South you see a closed patio door. To the East you see the living room. To the West you see a closed frosted-glass door. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen l2 l3 l4 l5 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l2 north)
    (closed_door kitchen l2)
    (connected kitchen l3 south)
    (closed_door kitchen l3)
    (connected kitchen l4 east)
    (connected kitchen l5 west)
    (closed_door kitchen l5)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen l2 l3 l4 l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l2 north)\n    (closed_door kitchen l2)\n    (connected kitchen l3 south)\n    (closed_door kitchen l3)\n    (connected kitchen l4 east)\n    (connected kitchen l5 west)\n    (closed_door kitchen l5)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/9445817d-5a39-4cee-9508-d69ded322d1d?external=True'}
resp[] /check/9445817d-5a39-4cee-9508-d69ded322d1d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN L4 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.79993e-05\nNodes generated during search: 6\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 5.79993e-05 secs\n'}
actions ['(move kitchen l4 east)', '(reach-goal)']
before map actions ['(move kitchen l4 east)']
after map actions ['move east']
> move east
Action: move east
You are in the living room. To the East you see a closed wood door. To the West you see the kitchen. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room l6 - location
    north south east west - direction
  )
  (:init
    (at living_room)
    (visited kitchen)
    (visited living_room)
    (connected kitchen living_room west)
    (connected living_room kitchen east)
    (connected living_room l6 east)
    (closed_door living_room l6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room l6 - location\n    north south east west - direction\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (visited living_room)\n    (connected kitchen living_room west)\n    (connected living_room kitchen east)\n    (connected living_room l6 east)\n    (closed_door living_room l6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/f42ea7a8-fe40-4e41-b1a4-f911f1d59820?external=True'}
resp[] /check/f42ea7a8-fe40-4e41-b1a4-f911f1d59820?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM L6)\n(MOVE LIVING_ROOM L6 EAST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 4 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 4\n\t#Fluents: 5\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.49997e-05\nNodes generated during search: 5\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.49997e-05 secs\n'}
actions ['(open_door living_room l6)', '(move living_room l6 east)']
before map actions ['(open_door living_room l6)', '(move living_room l6 east)']
after map actions ['open door to east', 'move east']
> open door to east
Action: open door to east
You open the wood door, revealing the bedroom. 
Step 2
> move east
Action: move east
You are in the bedroom. Through an open wood door, to the West you see the living room. 
Step 3
> take coin
Action: take coin
You take the coin.
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see a closed plain door. To the West you see the living room. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed plain door. To the West you see the living room. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed plain door. To the West you see the living room. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['open door to north', 'inventory', 'move north', 'close door to north', 'move west', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to north', 'move west', 'open door to south', 'open door to west', 'move west', 'open door to south', 'open door to west', 'move east', 'move south', 'open door to west', 'move north', 'move east', 'move north', 'move south', 'move west', 'move west', 'move west', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed plain door. To the West you see the living room. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room - location
    location_n1 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen location_n1 north)
    (closed_door kitchen location_n1)
    (connected kitchen living_room west)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room - location\n    location_n1 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen location_n1 north)\n    (closed_door kitchen location_n1)\n    (connected kitchen living_room west)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/7fc363e3-aff1-49b7-87d7-b5cc6a3b65ae?external=True'}
resp[] /check/7fc363e3-aff1-49b7-87d7-b5cc6a3b65ae?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LIVING_ROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 5 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 5\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.30008e-05\nNodes generated during search: 4\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.30008e-05 secs\n'}
actions ['(move kitchen living_room west)', '(reach-goal)']
before map actions ['(move kitchen living_room west)']
after map actions ['move west']
> move west
Action: move west
You are in the living room. To the South you see a closed screen door. To the East you see the kitchen. To the West you see a closed wood door. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room - location
    north south east west - direction
    location_w1 location_s1 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (visited living_room)
    (connected kitchen living_room east)
    (connected living_room kitchen east)
    (connected living_room location_s1 south)
    (closed_door living_room location_s1)
    (connected living_room location_w1 west)
    (closed_door living_room location_w1)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room - location\n    north south east west - direction\n    location_w1 location_s1 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (visited living_room)\n    (connected kitchen living_room east)\n    (connected living_room kitchen east)\n    (connected living_room location_s1 south)\n    (closed_door living_room location_s1)\n    (connected living_room location_w1 west)\n    (closed_door living_room location_w1)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/14d03493-8f44-4c16-9b3b-daf65ac69fe1?external=True'}
resp[] /check/14d03493-8f44-4c16-9b3b-daf65ac69fe1?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM LOCATION_S1)\n(MOVE LIVING_ROOM LOCATION_S1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 8 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 8\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 6.60004e-05\nNodes generated during search: 9\nNodes expanded during search: 5\nPlan found with cost: 3\nFast-BFS search completed in 6.60004e-05 secs\n'}
actions ['(open_door living_room location_s1)', '(move living_room location_s1 south)', '(reach-goal)']
before map actions ['(open_door living_room location_s1)', '(move living_room location_s1 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the screen door, revealing the backyard. 
Step 2
> move south
Action: move south
You are in the backyard. Through an open screen door, to the North you see the living room. To the East you see the street. To the West you see a closed patio door. 
Step 3
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room backyard - location
    north south east west - direction
    location_w1 location_e1 - location
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited living_room)
    (visited backyard)
    (connected living_room backyard north) ; An open screen door leads to the backyard
    (connected backyard living_room north)
    (connected backyard location_e1 east) ; The street is to the east
    (connected backyard location_w1 west) ; There's a closed patio door to the west
    (closed_door backyard location_w1)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room backyard - location\n    north south east west - direction\n    location_w1 location_e1 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (visited living_room)\n    (visited backyard)\n    (connected living_room backyard north) ; An open screen door leads to the backyard\n    (connected backyard living_room north)\n    (connected backyard location_e1 east) ; The street is to the east\n    (connected backyard location_w1 west) ; There's a closed patio door to the west\n    (closed_door backyard location_w1)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/392ab019-712c-485c-a15c-a9cbbf9f1184?external=True'}
resp[] /check/392ab019-712c-485c-a15c-a9cbbf9f1184?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD LOCATION_E1 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 7 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 7\n\t#Fluents: 7\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.99993e-05\nNodes generated during search: 5\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 5.99993e-05 secs\n'}
actions ['(move backyard location_e1 east)', '(reach-goal)']
before map actions ['(move backyard location_e1 east)']
after map actions ['move east']
> move east
Action: move east
You are in the street. To the East you see a closed commercial glass door. To the West you see the backyard. 
Step 4
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room backyard street - location
    north south east west - direction
    location_e1 - location
  )
  (:init
    (at street)
    (visited kitchen)
    (visited living_room)
    (visited backyard)
    (visited street)
    (connected backyard street west)
    (connected street backyard west)
    (connected street location_e1 east) ; There's a closed commercial glass door to the east
    (closed_door street location_e1)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': "(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room backyard street - location\n    north south east west - direction\n    location_e1 - location\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (visited living_room)\n    (visited backyard)\n    (visited street)\n    (connected backyard street west)\n    (connected street backyard west)\n    (connected street location_e1 east) ; There's a closed commercial glass door to the east\n    (closed_door street location_e1)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)"}
Output of job request {'result': '/check/b58a16ea-ab13-4481-999e-e17de055403d?external=True'}
resp[] /check/b58a16ea-ab13-4481-999e-e17de055403d?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR STREET LOCATION_E1)\n(MOVE STREET LOCATION_E1 EAST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 4 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 4\n\t#Fluents: 5\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.30004e-05\nNodes generated during search: 5\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 8.30004e-05 secs\n'}
actions ['(open_door street location_e1)', '(move street location_e1 east)']
before map actions ['(open_door street location_e1)', '(move street location_e1 east)']
after map actions ['open door to east', 'move east']
> open door to east
Action: open door to east
You open the commercial glass door, revealing the supermarket. 
Step 5
> move east
Action: move east
You are in the supermarket. Through an open commercial glass door, to the West you see the street. 
Step 6
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room backyard street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited living_room)
    (visited backyard)
    (visited street)
    (visited supermarket)
    (connected street supermarket west) ; An open commercial glass door leads to the supermarket
    (connected supermarket street west)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room backyard street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited living_room)\n    (visited backyard)\n    (visited street)\n    (visited supermarket)\n    (connected street supermarket west) ; An open commercial glass door leads to the supermarket\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/3bf217f6-a726-4d72-ba42-5ecd990b5b66?external=True'}
resp[] /check/3bf217f6-a726-4d72-ba42-5ecd990b5b66?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room backyard street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited living_room)
    (visited backyard)
    (visited street)
    (visited supermarket)
    (connected street supermarket west) ; The street is to the west, through an open commercial glass door
    (connected supermarket street west)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room backyard street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited living_room)\n    (visited backyard)\n    (visited street)\n    (visited supermarket)\n    (connected street supermarket west) ; The street is to the west, through an open commercial glass door\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/429c8cfc-4e62-415d-809d-ed584656a742?external=True'}
resp[] /check/429c8cfc-4e62-415d-809d-ed584656a742?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen living_room backyard street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited living_room)
    (visited backyard)
    (visited street)
    (visited supermarket)
    (connected street supermarket west) ; An open commercial glass door leads to the supermarket
    (connected supermarket street west)
  )
  (:goal 
    (exists (?x - location)
      (and
          (not (visited ?x))
          (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen living_room backyard street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited living_room)\n    (visited backyard)\n    (visited street)\n    (visited supermarket)\n    (connected street supermarket west) ; An open commercial glass door leads to the supermarket\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n          (not (visited ?x))\n          (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/5437092d-dc0e-4a88-910d-4b5f581541bd?external=True'}
resp[] /check/5437092d-dc0e-4a88-910d-4b5f581541bd?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the North you see a closed wood door. To the East you see the corridor. To the West you see a closed plain door. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the East you see the corridor. To the West you see a closed plain door. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the North you see a closed wood door. To the East you see the corridor. To the West you see a closed plain door. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move east', 'open door to west', 'move north', 'inventory', 'look around', 'open door to north', 'move west', 'close door to west', 'close door to north'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to north', 'open door to west', 'move north', 'move south', 'move east', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed wood door. To the East you see the corridor. To the West you see a closed plain door. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 l2 - location
    north south east west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l1 north)
    (connected kitchen corridor east)
    (connected kitchen l2 west)
    (closed_door kitchen l1)
    (closed_door kitchen l2)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 l2 - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l1 north)\n    (connected kitchen corridor east)\n    (connected kitchen l2 west)\n    (closed_door kitchen l1)\n    (closed_door kitchen l2)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/7b95ec94-9d5e-409f-a598-97b6eeb65228?external=True'}
resp[] /check/7b95ec94-9d5e-409f-a598-97b6eeb65228?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 8 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 8\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.20001e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.20001e-05 secs\n'}
actions ['(move kitchen corridor east)', '(reach-goal)']
before map actions ['(move kitchen corridor east)']
after map actions ['move east']
> move east
Action: move east
You are in the corridor. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see the kitchen. 
Step 1
> take coin
Action: take coin
You take the coin.
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. 
To the South you see a closed frosted-glass door. To the West you see the corridor. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the South you see a closed frosted-glass door. To the West you see the corridor. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. \nTo the South you see a closed frosted-glass door. To the West you see the corridor. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['open door to south', 'inventory', 'move south', 'close door to south', 'move west', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'open door to south', 'move west', 'open door to north', 'open door to south', 'open door to west', 'move south', 'move north', 'move west', 'open door to north', 'move east', 'move south', 'move north', 'move west', 'move north', 'open door to east', 'open door to west', 'move south', 'move east', 'move west', 'move east', 'move west', 'move north', 'move west', 'take coin']
Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the West you see the corridor. 
Step 0
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l1 - location
    south west - direction
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen l1 south)
    (connected kitchen corridor west)
    (closed_door kitchen l1)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l1 - location\n    south west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen l1 south)\n    (connected kitchen corridor west)\n    (closed_door kitchen l1)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/ed16ecb3-18c4-4f9d-ba1c-dbe378439f15?external=True'}
resp[] /check/ed16ecb3-18c4-4f9d-ba1c-dbe378439f15?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 5 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 5\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 5.59995e-05\nNodes generated during search: 4\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 5.59995e-05 secs\n'}
actions ['(move kitchen corridor west)', '(reach-goal)']
before map actions ['(move kitchen corridor west)']
after map actions ['move west']
> move west
Action: move west
You are in the corridor. To the North you see a closed patio door. To the South you see a closed wood door. To the East you see the kitchen. To the West you see a closed wood door. 
Step 1
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor l2 l3 l4 - location
    north south east west - direction
  )
  (:init
    (at corridor)
    (visited kitchen)
    (visited corridor)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Correcting the direction to kitchen
    (connected corridor l2 north)
    (connected corridor l3 south)
    (connected corridor l4 west)
    (closed_door corridor l2)
    (closed_door corridor l3)
    (closed_door corridor l4)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor l2 l3 l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (visited corridor)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Correcting the direction to kitchen\n    (connected corridor l2 north)\n    (connected corridor l3 south)\n    (connected corridor l4 west)\n    (closed_door corridor l2)\n    (closed_door corridor l3)\n    (closed_door corridor l4)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/7181823c-80a4-485c-bf53-a4d0375c6859?external=True'}
resp[] /check/7181823c-80a4-485c-bf53-a4d0375c6859?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR CORRIDOR L3)\n(MOVE CORRIDOR L3 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 7.69994e-05\nNodes generated during search: 12\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 7.69994e-05 secs\n'}
actions ['(open_door corridor l3)', '(move corridor l3 south)', '(reach-goal)']
before map actions ['(open_door corridor l3)', '(move corridor l3 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the wood door, revealing the laundry room. 
Step 2
> move south
Action: move south
You are in the laundry room. Through an open wood door, to the North you see the corridor. 
Step 3
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room l2 l4 - location
    north south east west - direction
  )
  (:init
    (at laundry_room)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Corrected the direction from the previous state
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor l2 north)
    (connected corridor l4 west)
    (closed_door corridor l2)
    (closed_door corridor l4)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room l2 l4 - location\n    north south east west - direction\n  )\n  (:init\n    (at laundry_room)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Corrected the direction from the previous state\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor l2 north)\n    (connected corridor l4 west)\n    (closed_door corridor l2)\n    (closed_door corridor l4)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/86228619-92f0-4052-833e-b0908c009ef7?external=True'}
resp[] /check/86228619-92f0-4052-833e-b0908c009ef7?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LAUNDRY_ROOM CORRIDOR NORTH)\n(OPEN_DOOR CORRIDOR L2)\n(MOVE CORRIDOR L2 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 10 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 10\n\t#Fluents: 10\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 9.6e-05\nNodes generated during search: 14\nNodes expanded during search: 8\nPlan found with cost: 4\nFast-BFS search completed in 9.6e-05 secs\n'}
actions ['(move laundry_room corridor north)', '(open_door corridor l2)', '(move corridor l2 north)', '(reach-goal)']
before map actions ['(move laundry_room corridor north)', '(open_door corridor l2)', '(move corridor l2 north)']
after map actions ['move north', 'open door to north', 'move north']
> move north
Action: move north
You are in the corridor. To the North you see a closed patio door. Through an open wood door, to the South you see the laundry room. To the East you see the kitchen. To the West you see a closed wood door. 
Step 4
> open door to north
Action: open door to north
You open the patio door, revealing the backyard. 
Step 5
> move north
Action: move north
You are in the backyard. Through an open patio door, to the South you see the corridor. To the East you see the driveway. To the West you see a closed sliding patio door. 
Step 6
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard l4 driveway - location
    north south east west - direction
  )
  (:init
    (at backyard)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Correction made for the direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected backyard l4 west)
    (closed_door backyard l4)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard l4 driveway - location\n    north south east west - direction\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Correction made for the direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected backyard l4 west)\n    (closed_door backyard l4)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/bba80bee-4b55-42a9-9fd1-d7221d7a0472?external=True'}
resp[] /check/bba80bee-4b55-42a9-9fd1-d7221d7a0472?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD DRIVEWAY EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.30008e-05\nNodes generated during search: 7\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.30008e-05 secs\n'}
actions ['(move backyard driveway east)', '(reach-goal)']
before map actions ['(move backyard driveway east)']
after map actions ['move east']
> move east
Action: move east
You are in the driveway. To the East you see the street. To the West you see the backyard. 
Step 7
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard driveway street - location
    north south east west - direction
  )
  (:init
    (at driveway)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (visited driveway)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Consistently correcting the direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected driveway backyard west)
    (connected driveway street east)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard driveway street - location\n    north south east west - direction\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (visited driveway)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Consistently correcting the direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected driveway backyard west)\n    (connected driveway street east)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/fe74abb9-318d-45f4-a92f-67eaacc30c4a?external=True'}
resp[] /check/fe74abb9-318d-45f4-a92f-67eaacc30c4a?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE DRIVEWAY STREET EAST)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 9 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 9\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 4.50009e-05\nNodes generated during search: 3\nNodes expanded during search: 1\nPlan found with cost: 1\nFast-BFS search completed in 4.50009e-05 secs\n'}
actions ['(move driveway street east)']
before map actions ['(move driveway street east)']
after map actions ['move east']
> move east
Action: move east
You are in the street. To the South you see a closed sliding door. To the West you see the driveway. 
Step 8
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard driveway street l5 - location
    north south east west - direction
  )
  (:init
    (at street)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (visited driveway)
    (visited street)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Consistently correcting the direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected driveway backyard west)
    (connected driveway street east)
    (connected street driveway west)
    (connected street l5 south)
    (closed_door street l5)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard driveway street l5 - location\n    north south east west - direction\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (visited driveway)\n    (visited street)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Consistently correcting the direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected driveway backyard west)\n    (connected driveway street east)\n    (connected street driveway west)\n    (connected street l5 south)\n    (closed_door street l5)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/18426358-528c-4909-a497-f97343c13423?external=True'}
resp[] /check/18426358-528c-4909-a497-f97343c13423?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR STREET L5)\n(MOVE STREET L5 SOUTH)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 12 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 12\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 9.20003e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 9.20003e-05 secs\n'}
actions ['(open_door street l5)', '(move street l5 south)']
before map actions ['(open_door street l5)', '(move street l5 south)']
after map actions ['open door to south', 'move south']
> open door to south
Action: open door to south
You open the sliding door, revealing the supermarket. 
Step 9
> move south
Action: move south
You are in the supermarket. Through an open sliding door, to the North you see the street. 
Step 10
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard driveway street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (visited driveway)
    (visited street)
    (visited supermarket)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Consistently correcting the direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected driveway backyard west)
    (connected driveway street east)
    (connected street driveway west)
    (connected street supermarket south)
    (connected supermarket street north)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard driveway street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (visited driveway)\n    (visited street)\n    (visited supermarket)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Consistently correcting the direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected driveway backyard west)\n    (connected driveway street east)\n    (connected street driveway west)\n    (connected street supermarket south)\n    (connected supermarket street north)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/cfd9a43f-d3d8-400d-aef0-a85fc541b54f?external=True'}
resp[] /check/cfd9a43f-d3d8-400d-aef0-a85fc541b54f?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard driveway street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (visited driveway)
    (visited street)
    (visited supermarket)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Ensuring correct direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected driveway backyard west)
    (connected driveway street east)
    (connected street driveway west)
    (connected street supermarket south)
    (connected supermarket street north)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard driveway street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (visited driveway)\n    (visited street)\n    (visited supermarket)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Ensuring correct direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected driveway backyard west)\n    (connected driveway street east)\n    (connected street driveway west)\n    (connected street supermarket south)\n    (connected supermarket street north)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/1acd27b4-d7a7-4499-9437-bda0b5044eae?external=True'}
resp[] /check/1acd27b4-d7a7-4499-9437-bda0b5044eae?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen corridor laundry_room backyard driveway street supermarket - location
    north south east west - direction
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (visited corridor)
    (visited laundry_room)
    (visited backyard)
    (visited driveway)
    (visited street)
    (visited supermarket)
    (connected kitchen corridor east)
    (connected corridor kitchen east) ; Consistently correcting the direction
    (connected corridor laundry_room south)
    (connected laundry_room corridor north)
    (connected corridor backyard north)
    (connected backyard corridor south)
    (connected backyard driveway east)
    (connected driveway backyard west)
    (connected driveway street east)
    (connected street driveway west)
    (connected street supermarket south)
    (connected supermarket street north)
  )
  (:goal 
    (exists (?x - location)
      (and
        (not (visited ?x))
        (at ?x)
      )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen corridor laundry_room backyard driveway street supermarket - location\n    north south east west - direction\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (visited corridor)\n    (visited laundry_room)\n    (visited backyard)\n    (visited driveway)\n    (visited street)\n    (visited supermarket)\n    (connected kitchen corridor east)\n    (connected corridor kitchen east) ; Consistently correcting the direction\n    (connected corridor laundry_room south)\n    (connected laundry_room corridor north)\n    (connected corridor backyard north)\n    (connected backyard corridor south)\n    (connected backyard driveway east)\n    (connected driveway backyard west)\n    (connected driveway street east)\n    (connected street driveway west)\n    (connected street supermarket south)\n    (connected supermarket street north)\n  )\n  (:goal \n    (exists (?x - location)\n      (and\n        (not (visited ?x))\n        (at ?x)\n      )\n    )\n  )\n)'}
Output of job request {'result': '/check/9655760a-a3be-43c0-94f4-8439c68e82e8?external=True'}
resp[] /check/9655760a-a3be-43c0-94f4-8439c68e82e8?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nff: goal can be simplified to FALSE. No plan will solve it\n\n'}
actions []
No plan found. Retrying...
obs : You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. 
To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
infos : {'observation': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. \nTo the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. ', 'look': 'You are in the kitchen. In one part of the room you see a stove. There is also an oven. You also see a fridge that is closed. In another part of the room you see a counter, that has nothing on it. In one part of the room you see a kitchen cupboard that is closed. There is also a cutlery drawer that is closed. You also see a trash can that is closed. In another part of the room you see a dishwasher that is closed. In one part of the room you see a dining chair, that has nothing on it. There is also a coin. \nTo the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. ', 'inventory': 'Inventory: \n  Your inventory is currently empty.\n', 'validActions': ['move west', 'close door to east', 'take coin', 'close door to south', 'move east', 'open door to south', 'move south', 'inventory', 'open door to east', 'look around'], 'scoreRaw': 0.0, 'score': 0.0, 'tasksuccess': False, 'taskfailure': False, 'reward': 0, 'done': False, 'numMoves': 0, 'taskDescription': 'Your task is to search the environment and find the coin.  Once you find the coin, take it.'}
Gold path: ['look around', 'take coin']
Action: look around
You are in the kitchen. To the South you see a closed frosted-glass door. To the East you see a closed wood door. To the West you see the corridor. 
Step 0
> take coin
Action: take coin
You take the coin.
[-1, -1, 9, 0, 7, 3, -1, 1, -1, 0]
0.6
