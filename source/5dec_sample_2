Gold path: ['look around', 'open door to south', 'move south', 'take coin']
Action: look around
You are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. 
Step 0
Printing Output here:  {
  "objects": {
    "add": [
      "loc1 - location",
      "corridor - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(connected kitchen loc1 south)",
      "(closed_door kitchen loc1)",
      "(connected kitchen corridor west)"
    ],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 south)
    (closed_door kitchen loc1)
    (connected kitchen corridor west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (closed_door kitchen loc1)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/6e3241c0-6130-4212-b46c-e49b679d1ef5?external=True'}
resp[] /check/6e3241c0-6130-4212-b46c-e49b679d1ef5?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN CORRIDOR WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 5 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 5\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.49996e-05\nNodes generated during search: 4\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 8.49996e-05 secs\n'}
actions ['(move kitchen corridor west)', '(reach-goal)']
before map actions ['(move kitchen corridor west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (closed_door kitchen loc1)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 south)
    (closed_door kitchen loc1)
    (connected kitchen corridor west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. 
Step 1
Printing Output here:  {
  "objects": {
    "add": [
      "loc2 - location",
      "loc3 - location",
      "living_room - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at corridor)",
      "(visited corridor)",
      "(connected corridor loc2 north)",
      "(closed_door corridor loc2)",
      "(connected corridor loc3 south)",
      "(closed_door corridor loc3)",
      "(connected corridor living_room west)",
      "(connected corridor kitchen east)"
    ],
    "replace": {
      "(at kitchen)": "(at corridor)"
    },
    "delete": [
      "(closed_door kitchen loc1)",
      "(connected kitchen corridor west)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc1 south)
    (at corridor)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor living_room west)
    (connected corridor kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/cdc1551b-bab3-4da3-b240-bfa349a572a4?external=True'}
resp[] /check/cdc1551b-bab3-4da3-b240-bfa349a572a4?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR LIVING_ROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 11 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 11\n\t#Fluents: 11\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.59996e-05\nNodes generated during search: 6\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.59996e-05 secs\n'}
actions ['(move corridor living_room west)', '(reach-goal)']
before map actions ['(move corridor living_room west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (closed_door kitchen loc1)\n    (connected kitchen corridor west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc1 south)
    (at corridor)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor living_room west)
    (connected corridor kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the living room. To the North you see a closed wood door. To the East you see the corridor. 
Step 2
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at living_room)",
      "(visited living_room)",
      "(connected living_room corridor east)",
      "(connected living_room loc4 north)"
    ],
    "replace": {
      "(at corridor)": "(at living_room)"
    },
    "delete": [
      "(at corridor)",
      "(connected corridor living_room west)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen loc1 south)
    (at living_room)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (at living_room)
    (visited living_room)
    (connected living_room corridor east)
    (connected living_room loc4 north)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (at living_room)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room corridor east)\n    (connected living_room loc4 north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8bf9fc65-d93b-4d47-8556-182ea6ad01fe?external=True'}
resp[] /check/8bf9fc65-d93b-4d47-8556-182ea6ad01fe?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant LOC4 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing Output here:  {
  "objects": {
    "add": [
      "loc4 - location" 	]
	,
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at living_room)",
      "(visited living_room)",
      "(connected living_room loc4 north)",
      "(closed_door living_room loc4)",
      "(connected living_room corridor east)"
    ],
    "replace": {},
    "delete": [
      "(at corridor)",
      "(connected corridor living_room west)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    loc4 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (at living_room)
    (visited living_room)
    (connected living_room loc4 north)
    (closed_door living_room loc4)
    (connected living_room corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc4 north)\n    (closed_door living_room loc4)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/5c50ca65-647c-4e53-816f-8426693e2467?external=True'}
resp[] /check/5c50ca65-647c-4e53-816f-8426693e2467?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM LOC4)\n(MOVE LIVING_ROOM LOC4 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 13 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 13\n\t#Fluents: 14\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 8.39999e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 8.39999e-05 secs\n'}
actions ['(open_door living_room loc4)', '(move living_room loc4 north)', '(reach-goal)']
before map actions ['(open_door living_room loc4)', '(move living_room loc4 north)']
after map actions ['open door to north', 'move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (at corridor)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor living_room west)\n    (connected corridor kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc4 north)\n    (closed_door living_room loc4)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to north', 'move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    loc4 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (at living_room)
    (visited living_room)
    (connected living_room loc4 north)
    (closed_door living_room loc4)
    (connected living_room corridor east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to north
Action: open door to north
You open the wood door, revealing the bathroom. 
Step 3
> move north
Action: move north
You are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. 
Step 4
Printing Output here:  {
  "objects": {
    "add": [
      "bathroom - location",
      "loc5 - location",
      "bedroom - location"
    ],
    "replace": {
      "loc4 - location": "bathroom - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at bathroom)",
      "(visited bathroom)",
      "(connected bathroom living_room south)",
      "(connected bathroom loc5 east)",
      "(closed_door bathroom loc5)",
      "(connected bathroom bedroom west)"
    ],
    "replace": {
      "(connected living_room loc4 north)": "(connected living_room bathroom north)"
    },
    "delete": [
      "(at living_room)",
      "(closed_door living_room loc4)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc5 - location
    bedroom - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bathroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc5 east)
    (closed_door bathroom loc5)
    (connected bathroom bedroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/ce54ca60-d8e8-483f-89b5-11585e726c08?external=True'}
resp[] /check/ce54ca60-d8e8-483f-89b5-11585e726c08?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BATHROOM BEDROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 17 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 17\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.89992e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.89992e-05 secs\n'}
actions ['(move bathroom bedroom west)', '(reach-goal)']
before map actions ['(move bathroom bedroom west)']
after map actions ['move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (at living_room)\n    (visited living_room)\n    (connected living_room loc4 north)\n    (closed_door living_room loc4)\n    (connected living_room corridor east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc5 - location
    bedroom - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (at bathroom)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc5 east)
    (closed_door bathroom loc5)
    (connected bathroom bedroom west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the bedroom. To the East you see the bathroom. 
Step 5
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at bedroom)",
      "(visited bedroom)",
      "(connected bedroom bathroom east)"
    ],
    "replace": {},
    "delete": [
      "(at bathroom)",
      "(connected bathroom bedroom west)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc5 - location
    bedroom - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc5 east)
    (closed_door bathroom loc5)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/fd2a1ad3-f621-43da-af14-53464e0ca8b0?external=True'}
resp[] /check/fd2a1ad3-f621-43da-af14-53464e0ca8b0?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BEDROOM BATHROOM EAST)\n(OPEN_DOOR BATHROOM LOC5)\n(MOVE BATHROOM LOC5 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 16 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 16\n\t#Fluents: 16\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 8.59992e-05\nNodes generated during search: 12\nNodes expanded during search: 7\nPlan found with cost: 4\nFast-BFS search completed in 8.59992e-05 secs\n'}
actions ['(move bedroom bathroom east)', '(open_door bathroom loc5)', '(move bathroom loc5 east)', '(reach-goal)']
before map actions ['(move bedroom bathroom east)', '(open_door bathroom loc5)', '(move bathroom loc5 east)']
after map actions ['move east', 'open door to east', 'move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (at bathroom)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (connected bathroom bedroom west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'open door to east', 'move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    loc5 - location
    bedroom - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom loc5 east)
    (closed_door bathroom loc5)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. 
Step 6
> open door to east
Action: open door to east
You open the wood door, revealing the laundry room. 
Step 7
> move east
Action: move east
You are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. 
Step 8
Printing Output here:  {
  "objects": {
    "add": [
      "laundry_room - location",
      "loc6 - location"
    ],
    "replace": {
      "loc5 - location": "laundry_room - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at laundry_room)",
      "(visited laundry_room)",
      "(connected laundry_room bathroom west)",
      "(connected laundry_room loc6 south)",
      "(closed_door laundry_room loc6)"
    ],
    "replace": {
      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",
      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"
    },
    "delete": [
      "(at bathroom)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    loc6 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room loc6 south)
    (closed_door laundry_room loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    loc6 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room loc6 south)\n    (closed_door laundry_room loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/05e56957-1afc-45f4-ba2a-a75659d581a3?external=True'}
resp[] /check/05e56957-1afc-45f4-ba2a-a75659d581a3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LAUNDRY_ROOM LOC6)\n(MOVE LAUNDRY_ROOM LOC6 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 19 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 19\n\t#Fluents: 19\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 0.000104\nNodes generated during search: 12\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 0.000104 secs\n'}
actions ['(open_door laundry_room loc6)', '(move laundry_room loc6 south)', '(reach-goal)']
before map actions ['(open_door laundry_room loc6)', '(move laundry_room loc6 south)']
after map actions ['open door to south', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    loc5 - location\n    bedroom - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom loc5 east)\n    (closed_door bathroom loc5)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    loc6 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room loc6 south)\n    (closed_door laundry_room loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to south', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    loc6 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (at laundry_room)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room loc6 south)
    (closed_door laundry_room loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to south
Action: open door to south
You open the wood door, revealing the corridor. 
Step 9
> move south
Action: move south
You are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. 
Step 10
Printing Output here:  {
  "objects": {
    "add": [
      "loc7 - location"
    ],
    "replace": {
      "loc6 - location": "corridor - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at corridor)",
      "(visited corridor)",
      "(connected corridor laundry_room north)",
      "(connected corridor loc7 south)",
      "(closed_door corridor loc7)",
      "(connected corridor kitchen east)",
      "(connected corridor living_room west)"
    ],
    "replace": {
      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",
      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"
    },
    "delete": [
      "(at laundry_room)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (at corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8b8e6430-387a-47ce-bc73-63ed040901d9?external=True'}
resp[] /check/8b8e6430-387a-47ce-bc73-63ed040901d9?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR KITCHEN EAST)\n(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 8.69992e-05\nNodes generated during search: 21\nNodes expanded during search: 9\nPlan found with cost: 3\nFast-BFS search completed in 8.69992e-05 secs\n'}
actions ['(move corridor kitchen east)', '(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move corridor kitchen east)', '(move kitchen loc1 south)']
after map actions ['move east', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    loc6 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (at laundry_room)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room loc6 south)\n    (closed_door laundry_room loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (at corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. 
Step 11
> move south
Action: move south
You can't move there, the door is closed. 
Step 12
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at kitchen)"
    ],
    "replace": {},
    "delete": [
      "(at corridor)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2f87120b-57ed-4666-b1fc-51ca9935614a?external=True'}
resp[] /check/2f87120b-57ed-4666-b1fc-51ca9935614a?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 0.000122001\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 0.000122001 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 13
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}

Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/f53e6711-ae75-4488-b396-5cb2279cd24f?external=True'}
resp[] /check/f53e6711-ae75-4488-b396-5cb2279cd24f?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.89999e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.89999e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 14
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}

Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8f49271f-e6ad-4681-b9d9-ec15b37ee20b?external=True'}
resp[] /check/8f49271f-e6ad-4681-b9d9-ec15b37ee20b?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.90009e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 8.90009e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 15
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}




Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/6242ac17-3a99-49c5-bf9c-b9ac832409c0?external=True'}
resp[] /check/6242ac17-3a99-49c5-bf9c-b9ac832409c0?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.39994e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.39994e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 16
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}

 
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/0c770034-7faa-42bb-83cf-df9f180dfbd5?external=True'}
resp[] /check/0c770034-7faa-42bb-83cf-df9f180dfbd5?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.20006e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.20006e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 17
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}

Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/104942a4-e546-4639-9448-aed8d3b17bd4?external=True'}
resp[] /check/104942a4-e546-4639-9448-aed8d3b17bd4?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.80002e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.80002e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 18
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/59915b16-3b4e-477f-8294-c70b1e2a1065?external=True'}
resp[] /check/59915b16-3b4e-477f-8294-c70b1e2a1065?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.09994e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.09994e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 19
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/d4d561c3-2aa7-48cb-936d-7a42879661fa?external=True'}
resp[] /check/d4d561c3-2aa7-48cb-936d-7a42879661fa?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.09995e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.09995e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 20
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}


Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/e6dd4366-06ae-4d06-b573-3ada7923c8b5?external=True'}
resp[] /check/e6dd4366-06ae-4d06-b573-3ada7923c8b5?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.40007e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.40007e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 21
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/6714a764-9c59-4413-a6ad-4a64bc5ccf4a?external=True'}
resp[] /check/6714a764-9c59-4413-a6ad-4a64bc5ccf4a?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.00006e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.00006e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 22
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/7a63691e-ec47-4e34-8546-8bc68d905c6c?external=True'}
resp[] /check/7a63691e-ec47-4e34-8546-8bc68d905c6c?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.70002e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.70002e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 23
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}

Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/b7281d13-c017-410a-8149-596f7233812e?external=True'}
resp[] /check/b7281d13-c017-410a-8149-596f7233812e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.29994e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 8.29994e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 24
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/894dd598-6e3d-4bf9-ac3c-0dbc86bb52ab?external=True'}
resp[] /check/894dd598-6e3d-4bf9-ac3c-0dbc86bb52ab?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.29998e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.29998e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 25
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/96fb100e-4fc4-46cd-8514-515d6b1243fa?external=True'}
resp[] /check/96fb100e-4fc4-46cd-8514-515d6b1243fa?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.90004e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.90004e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 26
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/e3e804a4-51fb-47d2-a82b-4811d0f1a6f3?external=True'}
resp[] /check/e3e804a4-51fb-47d2-a82b-4811d0f1a6f3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.79997e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 7.79997e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 27
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/4c336ecd-a55a-4263-86f1-2ff10d453abb?external=True'}
resp[] /check/4c336ecd-a55a-4263-86f1-2ff10d453abb?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.69999e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.69999e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 28
Printing Output here:  
{
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2f98e58f-86a0-4c96-a023-f377d60599cc?external=True'}
resp[] /check/2f98e58f-86a0-4c96-a023-f377d60599cc?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.50001e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.50001e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Step 29
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/271eadee-e99d-4ee3-b80d-077e1f167454?external=True'}
resp[] /check/271eadee-e99d-4ee3-b80d-077e1f167454?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LOC1 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 24 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 24\n\t#Fluents: 21\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.90008e-05\nNodes generated during search: 5\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.90008e-05 secs\n'}
actions ['(move kitchen loc1 south)', '(reach-goal)']
before map actions ['(move kitchen loc1 south)']
after map actions ['move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "corridor - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the corridor. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc2 - location",\n      "loc3 - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor loc2 north)",\n      "(closed_door corridor loc2)",\n      "(connected corridor loc3 south)",\n      "(closed_door corridor loc3)",\n      "(connected corridor living_room west)",\n      "(connected corridor kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at corridor)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)",\n      "(connected kitchen corridor west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the living room. To the North you see a closed wood door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc4 - location" \t]\n\t,\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room loc4 north)",\n      "(closed_door living_room loc4)",\n      "(connected living_room corridor east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)",\n      "(connected corridor living_room west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the bathroom. \nAction: move north\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "bathroom - location",\n      "loc5 - location",\n      "bedroom - location"\n    ],\n    "replace": {\n      "loc4 - location": "bathroom - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bathroom)",\n      "(visited bathroom)",\n      "(connected bathroom living_room south)",\n      "(connected bathroom loc5 east)",\n      "(closed_door bathroom loc5)",\n      "(connected bathroom bedroom west)"\n    ],\n    "replace": {\n      "(connected living_room loc4 north)": "(connected living_room bathroom north)"\n    },\n    "delete": [\n      "(at living_room)",\n      "(closed_door living_room loc4)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move west\nYou are in the bedroom. To the East you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at bedroom)",\n      "(visited bedroom)",\n      "(connected bedroom bathroom east)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at bathroom)",\n      "(connected bathroom bedroom west)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the bathroom. Through an open wood door, to the South you see the living room. To the East you see a closed wood door. To the West you see the bedroom. \nAction: open door to east\nYou open the wood door, revealing the laundry room. \nAction: move east\nYou are in the laundry room. To the South you see a closed wood door. Through an open wood door, to the West you see the bathroom. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry_room - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "laundry_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry_room)",\n      "(visited laundry_room)",\n      "(connected laundry_room bathroom west)",\n      "(connected laundry_room loc6 south)",\n      "(closed_door laundry_room loc6)"\n    ],\n    "replace": {\n      "(connected bathroom loc5 east)": "(connected bathroom laundry_room east)",\n      "(closed_door bathroom loc5)": "(closed_door bathroom laundry_room)"\n    },\n    "delete": [\n      "(at bathroom)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to south\nYou open the wood door, revealing the corridor. \nAction: move south\nYou are in the corridor. Through an open wood door, to the North you see the laundry room. To the South you see a closed sliding patio door. To the East you see the kitchen. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc7 - location"\n    ],\n    "replace": {\n      "loc6 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry_room north)",\n      "(connected corridor loc7 south)",\n      "(closed_door corridor loc7)",\n      "(connected corridor kitchen east)",\n      "(connected corridor living_room west)"\n    ],\n    "replace": {\n      "(connected laundry_room loc6 south)": "(connected laundry_room corridor south)",\n      "(closed_door laundry_room loc6)": "(closed_door laundry_room corridor)"\n    },\n    "delete": [\n      "(at laundry_room)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move east\nYou are in the kitchen. To the South you see a closed plain door. To the West you see the corridor. \nAction: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at kitchen)"\n    ],\n    "replace": {},\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n '}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}\n'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '\n{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: move south\nYou can't move there, the door is closed. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    corridor - location\n    loc2 - location\n    loc3 - location\n    living_room - location\n    bathroom - location\n    bathroom - location\n    laundry_room - location\n    bedroom - location\n    laundry_room - location\n    corridor - location\n    loc7 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 south)\n    (visited corridor)\n    (connected corridor loc2 north)\n    (closed_door corridor loc2)\n    (connected corridor loc3 south)\n    (closed_door corridor loc3)\n    (connected corridor kitchen east)\n    (visited living_room)\n    (connected living_room bathroom north)\n    (connected living_room corridor east)\n    (visited bathroom)\n    (connected bathroom living_room south)\n    (connected bathroom laundry_room east)\n    (closed_door bathroom laundry_room)\n    (at bedroom)\n    (visited bedroom)\n    (connected bedroom bathroom east)\n    (visited laundry_room)\n    (connected laundry_room bathroom west)\n    (connected laundry_room corridor south)\n    (closed_door laundry_room corridor)\n    (visited corridor)\n    (connected corridor laundry_room north)\n    (connected corridor loc7 south)\n    (closed_door corridor loc7)\n    (connected corridor kitchen east)\n    (connected corridor living_room west)\n    (at kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    corridor - location
    loc2 - location
    loc3 - location
    living_room - location
    bathroom - location
    bathroom - location
    laundry_room - location
    bedroom - location
    laundry_room - location
    corridor - location
    loc7 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 south)
    (visited corridor)
    (connected corridor loc2 north)
    (closed_door corridor loc2)
    (connected corridor loc3 south)
    (closed_door corridor loc3)
    (connected corridor kitchen east)
    (visited living_room)
    (connected living_room bathroom north)
    (connected living_room corridor east)
    (visited bathroom)
    (connected bathroom living_room south)
    (connected bathroom laundry_room east)
    (closed_door bathroom laundry_room)
    (at bedroom)
    (visited bedroom)
    (connected bedroom bathroom east)
    (visited laundry_room)
    (connected laundry_room bathroom west)
    (connected laundry_room corridor south)
    (closed_door laundry_room corridor)
    (visited corridor)
    (connected corridor laundry_room north)
    (connected corridor loc7 south)
    (closed_door corridor loc7)
    (connected corridor kitchen east)
    (connected corridor living_room west)
    (at kitchen)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You can't move there, the door is closed. 
Gold path: ['look around', 'open door to south', 'move north', 'open door to east', 'open door to west', 'move west', 'move north', 'move east', 'take coin']
Action: look around
You are in the kitchen. To the North you see the living room. To the South you see a closed frosted-glass door. 
Step 0
Printing Output here:  {
  "objects": {
    "add": [
      "living_room - location",
      "loc4 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(connected kitchen living_room north)",
      "(connected kitchen loc4 south)",
      "(closed_door kitchen loc4)"
    ],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    living_room - location
    loc4 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen living_room north)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/25c9f7ca-d328-479d-ab80-b97f591d466e?external=True'}
resp[] /check/25c9f7ca-d328-479d-ab80-b97f591d466e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE KITCHEN LIVING_ROOM NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 5 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 5\n\t#Fluents: 6\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.59999e-05\nNodes generated during search: 4\nNodes expanded during search: 2\nPlan found with cost: 2\nFast-BFS search completed in 6.59999e-05 secs\n'}
actions ['(move kitchen living_room north)', '(reach-goal)']
before map actions ['(move kitchen living_room north)']
after map actions ['move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see the living room. To the South you see a closed frosted-glass door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "living_room - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen living_room north)",\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen living_room north)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    living_room - location
    loc4 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen living_room north)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move north
Action: move north
You are in the living room. To the North you see the corridor. To the South you see the kitchen. To the East you see a closed wood door. To the West you see a closed patio door. 
Step 1
Printing Output here:  {
  "objects": {
    "add": [
      "corridor - location",
      "loc5 - location",
      "loc6 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(visited living_room)",
      "(connected living_room corridor north)",
      "(connected living_room loc5 east)",
      "(connected living_room loc6 west)",
      "(closed_door living_room loc5)",
      "(closed_door living_room loc6)"
    ],
    "replace": {
      "(at kitchen)": "(at living_room)",
      "(connected kitchen living_room north)": "(connected living_room kitchen south)"
    },
    "delete": [
      "(at kitchen)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    living_room - location
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected living_room kitchen south)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (visited living_room)
    (connected living_room corridor north)
    (connected living_room loc5 east)
    (connected living_room loc6 west)
    (closed_door living_room loc5)
    (closed_door living_room loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    living_room - location\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected living_room kitchen south)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (visited living_room)\n    (connected living_room corridor north)\n    (connected living_room loc5 east)\n    (connected living_room loc6 west)\n    (closed_door living_room loc5)\n    (closed_door living_room loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/69cebb49-c6ba-4273-9315-b53ea1c09f4e?external=True'}
resp[] /check/69cebb49-c6ba-4273-9315-b53ea1c09f4e?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE LIVING_ROOM CORRIDOR NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 12 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 12\n\t#Fluents: 13\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.29999e-05\nNodes generated during search: 11\nNodes expanded during search: 5\nPlan found with cost: 2\nFast-BFS search completed in 7.29999e-05 secs\n'}
actions ['(move living_room corridor north)', '(reach-goal)']
before map actions ['(move living_room corridor north)']
after map actions ['move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see the living room. To the South you see a closed frosted-glass door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "living_room - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen living_room north)",\n      "(connected kitchen loc4 south)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    living_room - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen living_room north)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move north\nYou are in the living room. To the North you see the corridor. To the South you see the kitchen. To the East you see a closed wood door. To the West you see a closed patio door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "loc5 - location",\n      "loc6 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited living_room)",\n      "(connected living_room corridor north)",\n      "(connected living_room loc5 east)",\n      "(connected living_room loc6 west)",\n      "(closed_door living_room loc5)",\n      "(closed_door living_room loc6)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at living_room)",\n      "(connected kitchen living_room north)": "(connected living_room kitchen south)"\n    },\n    "delete": [\n      "(at kitchen)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    living_room - location\n    loc4 - location\n    corridor - location\n    loc5 - location\n    loc6 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected living_room kitchen south)\n    (connected kitchen loc4 south)\n    (closed_door kitchen loc4)\n    (visited living_room)\n    (connected living_room corridor north)\n    (connected living_room loc5 east)\n    (connected living_room loc6 west)\n    (closed_door living_room loc5)\n    (closed_door living_room loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    living_room - location
    loc4 - location
    corridor - location
    loc5 - location
    loc6 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected living_room kitchen south)
    (connected kitchen loc4 south)
    (closed_door kitchen loc4)
    (visited living_room)
    (connected living_room corridor north)
    (connected living_room loc5 east)
    (connected living_room loc6 west)
    (closed_door living_room loc5)
    (closed_door living_room loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move north
Action: move north
You are in the corridor. To the North you see a closed wood door. To the South you see the living room. To the East you see a closed wood door. To the West you see the driveway. 
Step 2
> take coin
Action: take coin
You take the coin.
Gold path: ['look around', 'open door to north', 'open door to south', 'open door to east', 'open door to west', 'move west', 'move east', 'move west', 'move east', 'move south', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. 
Step 0
Printing Output here:  {
  "objects": {
    "add": [
      "loc1 - location",
      "loc2 - location",
      "loc3 - location",
      "loc4 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(connected kitchen loc1 north)",
      "(closed_door kitchen loc1)",
      "(connected kitchen loc2 south)",
      "(closed_door kitchen loc2)",
      "(connected kitchen loc3 east)",
      "(closed_door kitchen loc3)",
      "(connected kitchen loc4 west)",
      "(closed_door kitchen loc4)"
    ],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    loc3 - location
    loc4 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/3cf48b3d-5ab3-4f97-accd-386019eca9e2?external=True'}
resp[] /check/3cf48b3d-5ab3-4f97-accd-386019eca9e2?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR KITCHEN LOC1)\n(MOVE KITCHEN LOC1 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 12 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 12\n\t#Fluents: 14\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 1]--\nTotal time: 8.59998e-05\nNodes generated during search: 17\nNodes expanded during search: 8\nPlan found with cost: 3\nFast-BFS search completed in 8.59998e-05 secs\n'}
actions ['(open_door kitchen loc1)', '(move kitchen loc1 north)', '(reach-goal)']
before map actions ['(open_door kitchen loc1)', '(move kitchen loc1 north)']
after map actions ['open door to north', 'move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to north', 'move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    loc3 - location
    loc4 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to north
Action: open door to north
You open the wood door, revealing the laundry room. 
Step 1
> move north
Action: move north
You are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. 
Step 2
Printing Output here:  {
  "objects": {
    "add": [
      "laundry - location",
      "loc5 - location"
    ],
    "replace": {
      "loc1 - location": "laundry - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at laundry)",
      "(visited laundry)",
      "(connected laundry kitchen south)",
      "(connected laundry loc5 east)",
      "(closed_door laundry loc5)"
    ],
    "replace": {
      "(at kitchen)": "(at laundry)",
      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"
    },
    "delete": [
      "(closed_door kitchen loc1)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    loc5 - location
  )
  (:init
    (at laundry)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at laundry)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry loc5 east)
    (closed_door laundry loc5)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    loc5 - location\n  )\n  (:init\n    (at laundry)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at laundry)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry loc5 east)\n    (closed_door laundry loc5)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/1aafd3c5-3847-408d-8d72-d5cb1ba93197?external=True'}
resp[] /check/1aafd3c5-3847-408d-8d72-d5cb1ba93197?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LAUNDRY LOC5)\n(MOVE LAUNDRY LOC5 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 14 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 14\n\t#Fluents: 15\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.20004e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 9.20004e-05 secs\n'}
actions ['(open_door laundry loc5)', '(move laundry loc5 east)', '(reach-goal)']
before map actions ['(open_door laundry loc5)', '(move laundry loc5 east)']
after map actions ['open door to east', 'move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    loc5 - location\n  )\n  (:init\n    (at laundry)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at laundry)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry loc5 east)\n    (closed_door laundry loc5)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to east', 'move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    loc5 - location
  )
  (:init
    (at laundry)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at laundry)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry loc5 east)
    (closed_door laundry loc5)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to east
Action: open door to east
You open the wood door, revealing the corridor. 
Step 3
> move east
Action: move east
You are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. 
Step 4
Printing Output here:  {
  "objects": {
    "add": [
      "corridor - location",
      "driveway - location",
      "loc6 - location"
    ],
    "replace": {
      "loc5 - location": "corridor - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at corridor)",
      "(visited corridor)",
      "(connected corridor laundry west)",
      "(connected corridor driveway north)",
      "(connected corridor loc6 south)",
      "(closed_door corridor loc6)"
    ],
    "replace": {
      "(at laundry)": "(at corridor)",
      "(connected laundry loc5 east)": "(connected laundry corridor east)"
    },
    "delete": [
      "(closed_door laundry loc5)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    loc6 - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at corridor)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at corridor)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at corridor)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/dce48ccd-5fd3-4105-92b0-463dd6fb0307?external=True'}
resp[] /check/dce48ccd-5fd3-4105-92b0-463dd6fb0307?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE CORRIDOR DRIVEWAY NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 18 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 18\n\t#Fluents: 17\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 7.89998e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 7.89998e-05 secs\n'}
actions ['(move corridor driveway north)', '(reach-goal)']
before map actions ['(move corridor driveway north)']
after map actions ['move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    loc5 - location\n  )\n  (:init\n    (at laundry)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at laundry)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry loc5 east)\n    (closed_door laundry loc5)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at corridor)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    loc6 - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at corridor)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at corridor)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move north
Action: move north
You are in the driveway. To the South you see the corridor. 
Step 5
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at driveway)",
      "(visited driveway)",
      "(connected driveway corridor south)"
    ],
    "replace": {
      "(at corridor)": "(at driveway)"
    },
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    loc6 - location
  )
  (:init
    (at driveway)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at driveway)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at driveway)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (at driveway)
    (visited driveway)
    (connected driveway corridor south)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at driveway)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at driveway)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (at driveway)\n    (visited driveway)\n    (connected driveway corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/bc4a1599-9c7a-409d-987f-8117bd1352eb?external=True'}
resp[] /check/bc4a1599-9c7a-409d-987f-8117bd1352eb?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE DRIVEWAY CORRIDOR SOUTH)\n(OPEN_DOOR CORRIDOR LOC6)\n(MOVE CORRIDOR LOC6 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 18 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 18\n\t#Fluents: 17\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 8.49993e-05\nNodes generated during search: 13\nNodes expanded during search: 7\nPlan found with cost: 4\nFast-BFS search completed in 8.49993e-05 secs\n'}
actions ['(move driveway corridor south)', '(open_door corridor loc6)', '(move corridor loc6 south)', '(reach-goal)']
before map actions ['(move driveway corridor south)', '(open_door corridor loc6)', '(move corridor loc6 south)']
after map actions ['move south', 'open door to south', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at corridor)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at corridor)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move north\nYou are in the driveway. To the South you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at driveway)",\n      "(visited driveway)",\n      "(connected driveway corridor south)"\n    ],\n    "replace": {\n      "(at corridor)": "(at driveway)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at driveway)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at driveway)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (at driveway)\n    (visited driveway)\n    (connected driveway corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move south', 'open door to south', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    loc6 - location
  )
  (:init
    (at driveway)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at driveway)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at driveway)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor loc6 south)
    (closed_door corridor loc6)
    (at driveway)
    (visited driveway)
    (connected driveway corridor south)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move south
Action: move south
You are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. 
Step 6
> open door to south
Action: open door to south
You open the patio door, revealing the backyard. 
Step 7
> move south
Action: move south
You are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. 
Step 8
Printing Output here:  {
  "objects": {
    "add": [
      "backyard - location",
      "street - location",
      "loc7 - location",
      "loc8 - location"
    ],
    "replace": {
      "loc6 - location": "backyard - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at backyard)",
      "(visited backyard)",
      "(connected backyard corridor north)",
      "(connected backyard loc7 south)",
      "(closed_door backyard loc7)",
      "(connected backyard street east)",
      "(connected backyard loc8 west)",
      "(closed_door backyard loc8)"
    ],
    "replace": {
      "(at driveway)": "(at backyard)",
      "(connected corridor loc6 south)": "(connected corridor backyard south)",
      "(connected driveway corridor south)": "(connected backyard corridor north)"
    },
    "delete": [
      "(closed_door corridor loc6)",
      "(at corridor)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
  )
  (:init
    (at backyard)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at backyard)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at backyard)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at backyard)
    (visited driveway)
    (connected backyard corridor north)
    (at backyard)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at backyard)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at backyard)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at backyard)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/8f7ac8f4-0f67-42f2-95ff-6eb3c62eb6b3?external=True'}
resp[] /check/8f7ac8f4-0f67-42f2-95ff-6eb3c62eb6b3?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD STREET EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 25 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 25\n\t#Fluents: 22\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.40002e-05\nNodes generated during search: 12\nNodes expanded during search: 5\nPlan found with cost: 2\nFast-BFS search completed in 8.40002e-05 secs\n'}
actions ['(move backyard street east)', '(reach-goal)']
before map actions ['(move backyard street east)']
after map actions ['move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move north\nYou are in the driveway. To the South you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at driveway)",\n      "(visited driveway)",\n      "(connected driveway corridor south)"\n    ],\n    "replace": {\n      "(at corridor)": "(at driveway)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    loc6 - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at driveway)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at driveway)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor loc6 south)\n    (closed_door corridor loc6)\n    (at driveway)\n    (visited driveway)\n    (connected driveway corridor south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \nAction: open door to south\nYou open the patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "street - location",\n      "loc7 - location",\n      "loc8 - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard loc7 south)",\n      "(closed_door backyard loc7)",\n      "(connected backyard street east)",\n      "(connected backyard loc8 west)",\n      "(closed_door backyard loc8)"\n    ],\n    "replace": {\n      "(at driveway)": "(at backyard)",\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(connected driveway corridor south)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(closed_door corridor loc6)",\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at backyard)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at backyard)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at backyard)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
  )
  (:init
    (at backyard)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at backyard)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at backyard)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at backyard)
    (visited driveway)
    (connected backyard corridor north)
    (at backyard)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the street. To the East you see a closed commercial glass door. To the West you see the backyard. 
Step 9
Printing Output here:  {
  "objects": {
    "add": [
      "loc9 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(at street)",
      "(visited street)",
      "(connected street backyard west)",
      "(connected street loc9 east)",
      "(closed_door street loc9)"
    ],
    "replace": {
      "(at backyard)": "(at street)"
    },
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
    loc9 - location
  )
  (:init
    (at street)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at street)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at street)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at street)
    (visited driveway)
    (connected backyard corridor north)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at street)
    (visited street)
    (connected street backyard west)
    (connected street loc9 east)
    (closed_door street loc9)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    loc9 - location\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at street)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at street)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at street)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at street)\n    (visited street)\n    (connected street backyard west)\n    (connected street loc9 east)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/81dfc45a-0fb0-4ac9-8f52-373fc2881498?external=True'}
resp[] /check/81dfc45a-0fb0-4ac9-8f52-373fc2881498?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR STREET LOC9)\n(MOVE STREET LOC9 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 28 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 28\n\t#Fluents: 25\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 7.70004e-05\nNodes generated during search: 11\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 7.70004e-05 secs\n'}
actions ['(open_door street loc9)', '(move street loc9 east)', '(reach-goal)']
before map actions ['(open_door street loc9)', '(move street loc9 east)']
after map actions ['open door to east', 'move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move north\nYou are in the driveway. To the South you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at driveway)",\n      "(visited driveway)",\n      "(connected driveway corridor south)"\n    ],\n    "replace": {\n      "(at corridor)": "(at driveway)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \nAction: open door to south\nYou open the patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "street - location",\n      "loc7 - location",\n      "loc8 - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard loc7 south)",\n      "(closed_door backyard loc7)",\n      "(connected backyard street east)",\n      "(connected backyard loc8 west)",\n      "(closed_door backyard loc8)"\n    ],\n    "replace": {\n      "(at driveway)": "(at backyard)",\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(connected driveway corridor south)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(closed_door corridor loc6)",\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at backyard)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at backyard)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at backyard)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at backyard)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move east\nYou are in the street. To the East you see a closed commercial glass door. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard west)",\n      "(connected street loc9 east)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    loc9 - location\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at street)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at street)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at street)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at street)\n    (visited street)\n    (connected street backyard west)\n    (connected street loc9 east)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to east', 'move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
    loc9 - location
  )
  (:init
    (at street)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at street)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at street)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at street)
    (visited driveway)
    (connected backyard corridor north)
    (at street)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at street)
    (visited street)
    (connected street backyard west)
    (connected street loc9 east)
    (closed_door street loc9)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to east
Action: open door to east
You open the commercial glass door, revealing the supermarket. 
Step 10
> move east
Action: move east
You are in the supermarket. Through an open commercial glass door, to the West you see the street. 
Step 11
Printing Output here:  {
  "objects": {
    "add": [
      "supermarket - location"
    ],
    "replace": {
      "loc9 - location": "supermarket - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at supermarket)",
      "(visited supermarket)",
      "(connected supermarket street west)"
    ],
    "replace": {
      "(at street)": "(at supermarket)",
      "(connected street loc9 east)": "(connected street supermarket east)"
    },
    "delete": [
      "(closed_door street loc9)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at supermarket)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at supermarket)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at supermarket)
    (visited driveway)
    (connected backyard corridor north)
    (at supermarket)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at supermarket)
    (visited street)
    (connected street backyard west)
    (connected street supermarket east)
    (at supermarket)
    (visited supermarket)
    (connected supermarket street west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at supermarket)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at supermarket)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at supermarket)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at supermarket)\n    (visited street)\n    (connected street backyard west)\n    (connected street supermarket east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/60d4d7d2-d3da-4d0d-9eff-9663b6258a72?external=True'}
resp[] /check/60d4d7d2-d3da-4d0d-9eff-9663b6258a72?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE SUPERMARKET STREET WEST)\n(MOVE STREET BACKYARD WEST)\n(OPEN_DOOR BACKYARD LOC7)\n(MOVE BACKYARD LOC7 SOUTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 27 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 27\n\t#Fluents: 23\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[1 / 4]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 0.000112001\nNodes generated during search: 16\nNodes expanded during search: 7\nPlan found with cost: 5\nFast-BFS search completed in 0.000112001 secs\n'}
actions ['(move supermarket street west)', '(move street backyard west)', '(open_door backyard loc7)', '(move backyard loc7 south)', '(reach-goal)']
before map actions ['(move supermarket street west)', '(move street backyard west)', '(open_door backyard loc7)', '(move backyard loc7 south)']
after map actions ['move west', 'move west', 'open door to south', 'move south']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move north\nYou are in the driveway. To the South you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at driveway)",\n      "(visited driveway)",\n      "(connected driveway corridor south)"\n    ],\n    "replace": {\n      "(at corridor)": "(at driveway)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \nAction: open door to south\nYou open the patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "street - location",\n      "loc7 - location",\n      "loc8 - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard loc7 south)",\n      "(closed_door backyard loc7)",\n      "(connected backyard street east)",\n      "(connected backyard loc8 west)",\n      "(closed_door backyard loc8)"\n    ],\n    "replace": {\n      "(at driveway)": "(at backyard)",\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(connected driveway corridor south)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(closed_door corridor loc6)",\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the street. To the East you see a closed commercial glass door. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard west)",\n      "(connected street loc9 east)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    loc9 - location\n  )\n  (:init\n    (at street)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at street)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at street)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at street)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at street)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at street)\n    (visited street)\n    (connected street backyard west)\n    (connected street loc9 east)\n    (closed_door street loc9)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the commercial glass door, revealing the supermarket. \nAction: move east\nYou are in the supermarket. Through an open commercial glass door, to the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "supermarket - location"\n    ],\n    "replace": {\n      "loc9 - location": "supermarket - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at supermarket)",\n      "(visited supermarket)",\n      "(connected supermarket street west)"\n    ],\n    "replace": {\n      "(at street)": "(at supermarket)",\n      "(connected street loc9 east)": "(connected street supermarket east)"\n    },\n    "delete": [\n      "(closed_door street loc9)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at supermarket)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at supermarket)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at supermarket)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at supermarket)\n    (visited street)\n    (connected street backyard west)\n    (connected street supermarket east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move west', 'move west', 'open door to south', 'move south']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    loc7 - location
    loc8 - location
    supermarket - location
    supermarket - location
  )
  (:init
    (at supermarket)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at supermarket)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at supermarket)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at supermarket)
    (visited driveway)
    (connected backyard corridor north)
    (at supermarket)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard loc7 south)
    (closed_door backyard loc7)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at supermarket)
    (visited street)
    (connected street backyard west)
    (connected street supermarket east)
    (at supermarket)
    (visited supermarket)
    (connected supermarket street west)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move west
Action: move west
You are in the street. Through an open commercial glass door, to the East you see the supermarket. To the West you see the backyard. 
Step 12
> move west
Action: move west
You are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. 
Step 13
> open door to south
Action: open door to south
You open the sliding patio door, revealing the living room. 
Step 14
> move south
Action: move south
You are in the living room. Through an open sliding patio door, to the North you see the backyard. To the South you see a closed wood door. To the West you see a closed wood door. 
Step 15
Printing Output here:  {
  "objects": {
    "add": [
      "living_room - location",
      "loc10 - location",
      "loc11 - location"
    ],
    "replace": {
      "loc7 - location": "living_room - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(at living_room)",
      "(visited living_room)",
      "(connected living_room backyard north)",
      "(connected living_room loc10 south)",
      "(closed_door living_room loc10)",
      "(connected living_room loc11 west)",
      "(closed_door living_room loc11)"
    ],
    "replace": {
      "(at supermarket)": "(at living_room)",
      "(connected backyard loc7 south)": "(connected backyard living_room south)"
    },
    "delete": [
      "(at backyard)",
      "(at street)",
      "(closed_door backyard loc7)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    living_room - location
    loc8 - location
    supermarket - location
    supermarket - location
    living_room - location
    loc10 - location
    loc11 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at living_room)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at living_room)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at living_room)
    (visited driveway)
    (connected backyard corridor north)
    (at living_room)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard living_room south)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at living_room)
    (visited street)
    (connected street backyard west)
    (connected street supermarket east)
    (at living_room)
    (visited supermarket)
    (connected supermarket street west)
    (at living_room)
    (visited living_room)
    (connected living_room backyard north)
    (connected living_room loc10 south)
    (closed_door living_room loc10)
    (connected living_room loc11 west)
    (closed_door living_room loc11)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    living_room - location\n    loc8 - location\n    supermarket - location\n    supermarket - location\n    living_room - location\n    loc10 - location\n    loc11 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at living_room)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at living_room)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at living_room)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at living_room)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard living_room south)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at living_room)\n    (visited street)\n    (connected street backyard west)\n    (connected street supermarket east)\n    (at living_room)\n    (visited supermarket)\n    (connected supermarket street west)\n    (at living_room)\n    (visited living_room)\n    (connected living_room backyard north)\n    (connected living_room loc10 south)\n    (closed_door living_room loc10)\n    (connected living_room loc11 west)\n    (closed_door living_room loc11)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/a43f8f40-3ef7-49f9-b98f-283facb7df13?external=True'}
resp[] /check/a43f8f40-3ef7-49f9-b98f-283facb7df13?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM LOC11)\n(MOVE LIVING_ROOM LOC11 WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 32 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 32\n\t#Fluents: 27\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 8.29996e-05\nNodes generated during search: 14\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 8.29996e-05 secs\n'}
actions ['(open_door living_room loc11)', '(move living_room loc11 west)', '(reach-goal)']
before map actions ['(open_door living_room loc11)', '(move living_room loc11 west)']
after map actions ['open door to west', 'move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the South you see a closed wood door. To the East you see a closed patio door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location",\n      "loc4 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 south)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 east)",\n      "(closed_door kitchen loc3)",\n      "(connected kitchen loc4 west)",\n      "(closed_door kitchen loc4)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to north\nYou open the wood door, revealing the laundry room. \nAction: move north\nYou are in the laundry room. Through an open wood door, to the South you see the kitchen. To the East you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "laundry - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc1 - location": "laundry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at laundry)",\n      "(visited laundry)",\n      "(connected laundry kitchen south)",\n      "(connected laundry loc5 east)",\n      "(closed_door laundry loc5)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at laundry)",\n      "(connected kitchen loc1 north)": "(connected kitchen laundry north)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the wood door, revealing the corridor. \nAction: move east\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "driveway - location",\n      "loc6 - location"\n    ],\n    "replace": {\n      "loc5 - location": "corridor - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at corridor)",\n      "(visited corridor)",\n      "(connected corridor laundry west)",\n      "(connected corridor driveway north)",\n      "(connected corridor loc6 south)",\n      "(closed_door corridor loc6)"\n    ],\n    "replace": {\n      "(at laundry)": "(at corridor)",\n      "(connected laundry loc5 east)": "(connected laundry corridor east)"\n    },\n    "delete": [\n      "(closed_door laundry loc5)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move north\nYou are in the driveway. To the South you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at driveway)",\n      "(visited driveway)",\n      "(connected driveway corridor south)"\n    ],\n    "replace": {\n      "(at corridor)": "(at driveway)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move south\nYou are in the corridor. To the North you see the driveway. To the South you see a closed patio door. Through an open wood door, to the West you see the laundry room. \nAction: open door to south\nYou open the patio door, revealing the backyard. \nAction: move south\nYou are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "street - location",\n      "loc7 - location",\n      "loc8 - location"\n    ],\n    "replace": {\n      "loc6 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at backyard)",\n      "(visited backyard)",\n      "(connected backyard corridor north)",\n      "(connected backyard loc7 south)",\n      "(closed_door backyard loc7)",\n      "(connected backyard street east)",\n      "(connected backyard loc8 west)",\n      "(closed_door backyard loc8)"\n    ],\n    "replace": {\n      "(at driveway)": "(at backyard)",\n      "(connected corridor loc6 south)": "(connected corridor backyard south)",\n      "(connected driveway corridor south)": "(connected backyard corridor north)"\n    },\n    "delete": [\n      "(closed_door corridor loc6)",\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the street. To the East you see a closed commercial glass door. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc9 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at street)",\n      "(visited street)",\n      "(connected street backyard west)",\n      "(connected street loc9 east)",\n      "(closed_door street loc9)"\n    ],\n    "replace": {\n      "(at backyard)": "(at street)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to east\nYou open the commercial glass door, revealing the supermarket. \nAction: move east\nYou are in the supermarket. Through an open commercial glass door, to the West you see the street. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "supermarket - location"\n    ],\n    "replace": {\n      "loc9 - location": "supermarket - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at supermarket)",\n      "(visited supermarket)",\n      "(connected supermarket street west)"\n    ],\n    "replace": {\n      "(at street)": "(at supermarket)",\n      "(connected street loc9 east)": "(connected street supermarket east)"\n    },\n    "delete": [\n      "(closed_door street loc9)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    loc7 - location\n    loc8 - location\n    supermarket - location\n    supermarket - location\n  )\n  (:init\n    (at supermarket)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at supermarket)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at supermarket)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at supermarket)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at supermarket)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard loc7 south)\n    (closed_door backyard loc7)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at supermarket)\n    (visited street)\n    (connected street backyard west)\n    (connected street supermarket east)\n    (at supermarket)\n    (visited supermarket)\n    (connected supermarket street west)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move west\nYou are in the street. Through an open commercial glass door, to the East you see the supermarket. To the West you see the backyard. \nAction: move west\nYou are in the backyard. Through an open patio door, to the North you see the corridor. To the South you see a closed sliding patio door. To the East you see the street. To the West you see a closed patio door. \nAction: open door to south\nYou open the sliding patio door, revealing the living room. \nAction: move south\nYou are in the living room. Through an open sliding patio door, to the North you see the backyard. To the South you see a closed wood door. To the West you see a closed wood door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "living_room - location",\n      "loc10 - location",\n      "loc11 - location"\n    ],\n    "replace": {\n      "loc7 - location": "living_room - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(at living_room)",\n      "(visited living_room)",\n      "(connected living_room backyard north)",\n      "(connected living_room loc10 south)",\n      "(closed_door living_room loc10)",\n      "(connected living_room loc11 west)",\n      "(closed_door living_room loc11)"\n    ],\n    "replace": {\n      "(at supermarket)": "(at living_room)",\n      "(connected backyard loc7 south)": "(connected backyard living_room south)"\n    },\n    "delete": [\n      "(at backyard)",\n      "(at street)",\n      "(closed_door backyard loc7)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    laundry - location\n    loc2 - location\n    loc3 - location\n    loc4 - location\n    laundry - location\n    corridor - location\n    corridor - location\n    driveway - location\n    backyard - location\n    backyard - location\n    street - location\n    living_room - location\n    loc8 - location\n    supermarket - location\n    supermarket - location\n    living_room - location\n    loc10 - location\n    loc11 - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen laundry north)\n    (connected kitchen loc2 south)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 east)\n    (closed_door kitchen loc3)\n    (connected kitchen loc4 west)\n    (closed_door kitchen loc4)\n    (at living_room)\n    (visited laundry)\n    (connected laundry kitchen south)\n    (connected laundry corridor east)\n    (at living_room)\n    (visited corridor)\n    (connected corridor laundry west)\n    (connected corridor driveway north)\n    (connected corridor backyard south)\n    (at living_room)\n    (visited driveway)\n    (connected backyard corridor north)\n    (at living_room)\n    (visited backyard)\n    (connected backyard corridor north)\n    (connected backyard living_room south)\n    (connected backyard street east)\n    (connected backyard loc8 west)\n    (closed_door backyard loc8)\n    (at living_room)\n    (visited street)\n    (connected street backyard west)\n    (connected street supermarket east)\n    (at living_room)\n    (visited supermarket)\n    (connected supermarket street west)\n    (at living_room)\n    (visited living_room)\n    (connected living_room backyard north)\n    (connected living_room loc10 south)\n    (closed_door living_room loc10)\n    (connected living_room loc11 west)\n    (closed_door living_room loc11)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to west', 'move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    laundry - location
    loc2 - location
    loc3 - location
    loc4 - location
    laundry - location
    corridor - location
    corridor - location
    driveway - location
    backyard - location
    backyard - location
    street - location
    living_room - location
    loc8 - location
    supermarket - location
    supermarket - location
    living_room - location
    loc10 - location
    loc11 - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen laundry north)
    (connected kitchen loc2 south)
    (closed_door kitchen loc2)
    (connected kitchen loc3 east)
    (closed_door kitchen loc3)
    (connected kitchen loc4 west)
    (closed_door kitchen loc4)
    (at living_room)
    (visited laundry)
    (connected laundry kitchen south)
    (connected laundry corridor east)
    (at living_room)
    (visited corridor)
    (connected corridor laundry west)
    (connected corridor driveway north)
    (connected corridor backyard south)
    (at living_room)
    (visited driveway)
    (connected backyard corridor north)
    (at living_room)
    (visited backyard)
    (connected backyard corridor north)
    (connected backyard living_room south)
    (connected backyard street east)
    (connected backyard loc8 west)
    (closed_door backyard loc8)
    (at living_room)
    (visited street)
    (connected street backyard west)
    (connected street supermarket east)
    (at living_room)
    (visited supermarket)
    (connected supermarket street west)
    (at living_room)
    (visited living_room)
    (connected living_room backyard north)
    (connected living_room loc10 south)
    (closed_door living_room loc10)
    (connected living_room loc11 west)
    (closed_door living_room loc11)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to west
Action: open door to west
You open the wood door, revealing the bathroom. 
Step 16
> move west
Action: move west
You are in the bathroom. To the North you see a closed wood door. Through an open wood door, to the East you see the living room. 
Step 17
> take coin
Action: take coin
You take the coin.
Gold path: ['look around', 'take coin']
Action: look around
You are in the kitchen. To the East you see a closed screen door. To the West you see a closed frosted-glass door. 
Step 0
> take coin
Action: take coin
You take the coin.
Gold path: ['look around', 'open door to north', 'open door to east', 'open door to west', 'move west', 'move east', 'move north', 'move south', 'move east', 'open door to north', 'move west', 'move north', 'move south', 'move west', 'move east', 'move east', 'move south', 'take coin']
Action: look around
You are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. 
Step 0
Printing Output here:  {
  "objects": {
    "add": [
      "loc1 - location",
      "loc2 - location",
      "loc3 - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(connected kitchen loc1 north)",
      "(closed_door kitchen loc1)",
      "(connected kitchen loc2 east)",
      "(closed_door kitchen loc2)",
      "(connected kitchen loc3 west)",
      "(closed_door kitchen loc3)"
    ],
    "replace": {},
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    loc3 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 east)
    (closed_door kitchen loc2)
    (connected kitchen loc3 west)
    (closed_door kitchen loc3)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 west)\n    (closed_door kitchen loc3)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/16f191c7-4029-4e9a-80c3-cf9f91470cde?external=True'}
resp[] /check/16f191c7-4029-4e9a-80c3-cf9f91470cde?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR KITCHEN LOC3)\n(MOVE KITCHEN LOC3 WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 9 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 9\n\t#Fluents: 11\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 7.20009e-05\nNodes generated during search: 10\nNodes expanded during search: 5\nPlan found with cost: 3\nFast-BFS search completed in 7.20009e-05 secs\n'}
actions ['(open_door kitchen loc3)', '(move kitchen loc3 west)', '(reach-goal)']
before map actions ['(open_door kitchen loc3)', '(move kitchen loc3 west)']
after map actions ['open door to west', 'move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 west)\n    (closed_door kitchen loc3)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to west', 'move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    loc3 - location
  )
  (:init
    (at kitchen)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 east)
    (closed_door kitchen loc2)
    (connected kitchen loc3 west)
    (closed_door kitchen loc3)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to west
Action: open door to west
You open the plain door, revealing the pantry. 
Step 1
> move west
Action: move west
You are in the pantry. Through an open plain door, to the East you see the kitchen. 
Step 2
Printing Output here:  {
  "objects": {
    "add": [],
    "replace": {
      "loc3 - location": "pantry - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(visited pantry)",
      "(connected pantry kitchen east)"
    ],
    "replace": {
      "(at kitchen)": "(at pantry)",
      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"
    },
    "delete": [
      "(closed_door kitchen loc3)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    pantry - location
  )
  (:init
    (at pantry)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 east)
    (closed_door kitchen loc2)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    pantry - location\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/29098eb8-a4e3-41a9-94e6-f9998e6b1122?external=True'}
resp[] /check/29098eb8-a4e3-41a9-94e6-f9998e6b1122?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE PANTRY KITCHEN EAST)\n(OPEN_DOOR KITCHEN LOC2)\n(MOVE KITCHEN LOC2 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 8 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 8\n\t#Fluents: 9\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[1 / 3]--\n--[0 / 0]--\n--[0 / 4]--\nTotal time: 8.69997e-05\nNodes generated during search: 10\nNodes expanded during search: 5\nPlan found with cost: 4\nFast-BFS search completed in 8.69997e-05 secs\n'}
actions ['(move pantry kitchen east)', '(open_door kitchen loc2)', '(move kitchen loc2 east)', '(reach-goal)']
before map actions ['(move pantry kitchen east)', '(open_door kitchen loc2)', '(move kitchen loc2 east)']
after map actions ['move east', 'open door to east', 'move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    loc3 - location\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen loc3 west)\n    (closed_door kitchen loc3)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the plain door, revealing the pantry. \nAction: move west\nYou are in the pantry. Through an open plain door, to the East you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc3 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"\n    },\n    "delete": [\n      "(closed_door kitchen loc3)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    pantry - location\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east', 'open door to east', 'move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    loc2 - location
    pantry - location
  )
  (:init
    (at pantry)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen loc2 east)
    (closed_door kitchen loc2)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. Through an open plain door, to the West you see the pantry. 
Step 3
> open door to east
Action: open door to east
You open the screen door, revealing the backyard. 
Step 4
> move east
Action: move east
You are in the backyard. To the North you see a closed sliding patio door. To the South you see the street. To the East you see the driveway. Through an open screen door, to the West you see the kitchen. 
Step 5
Printing Output here:  {
  "objects": {
    "add": [
      "backyard - location"
    ],
    "replace": {
      "loc2 - location": "backyard - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(visited backyard)",
      "(connected backyard kitchen west)",
      "(at backyard)",
      "(connected backyard loc4 north)",
      "(closed_door backyard loc4)",
      "(connected backyard loc5 south)",
      "(connected backyard loc6 east)"
    ],
    "replace": {
      "(at kitchen)": "(at backyard)",
      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"
    },
    "delete": [
      "(at pantry)",
      "(closed_door kitchen loc2)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (at backyard)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard loc5 south)
    (connected backyard loc6 east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (at backyard)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard loc5 south)\n    (connected backyard loc6 east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/2dabb818-0874-45c7-88bc-567e4076fa5b?external=True'}
resp[] /check/2dabb818-0874-45c7-88bc-567e4076fa5b?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant LOC4 in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing Output here:  {
  "objects": {
    "add": [
      "backyard - location",
      "loc4 - location",
      "loc5 - location"
    ],
    "replace": {
      "loc2 - location": "backyard - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(visited backyard)",
      "(connected backyard kitchen west)",
      "(connected backyard loc4 north)",
      "(closed_door backyard loc4)",
      "(connected backyard loc5 east)",
      "(connected backyard street south)"
    ],
    "replace": {
      "(at kitchen)": "(at backyard)",
      "(closed_door kitchen loc2)": "(closed_door kitchen backyard)",
      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"
    },
    "delete": [
      "(at pantry)",
      "(closed_door kitchen backyard)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    loc5 - location
  )
  (:init
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (closed_door kitchen backyard)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard loc5 east)
    (connected backyard street south)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    loc5 - location\n  )\n  (:init\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (closed_door kitchen backyard)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard loc5 east)\n    (connected backyard street south)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/4aa4fc47-bd06-433f-a114-9cd310300a57?external=True'}
resp[] /check/4aa4fc47-bd06-433f-a114-9cd310300a57?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': ''}, 'output_type': 'generic', 'stderr': '', 'stdout': '\nunknown constant STREET in literal CONNECTED. check input files\n\n'}
actions []
No plan found. Retrying...
Printing Output here:  {
  "objects": {
    "add": [
      "backyard - location",
      "loc4 - location",
      "loc5 - location"
    ],
    "replace": {
      "loc2 - location": "backyard - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(visited backyard)",
      "(connected backyard kitchen west)",
      "(connected backyard loc4 north)",
      "(closed_door backyard loc4)",
      "(connected backyard loc5 east)"
    ],
    "replace": {
      "(at pantry)": "(at backyard)",
      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"
    },
    "delete": [
      "(closed_door kitchen loc2)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    loc5 - location
  )
  (:init
    (at backyard)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard loc5 east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    loc5 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard loc5 east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/521a75de-c4b0-4367-90ed-040991c72a34?external=True'}
resp[] /check/521a75de-c4b0-4367-90ed-040991c72a34?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE BACKYARD LOC5 EAST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 12 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 12\n\t#Fluents: 11\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 6.49993e-05\nNodes generated during search: 7\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 6.49993e-05 secs\n'}
actions ['(move backyard loc5 east)', '(reach-goal)']
before map actions ['(move backyard loc5 east)']
after map actions ['move east']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the plain door, revealing the pantry. \nAction: move west\nYou are in the pantry. Through an open plain door, to the East you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc3 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"\n    },\n    "delete": [\n      "(closed_door kitchen loc3)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    loc2 - location\n    pantry - location\n  )\n  (:init\n    (at pantry)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen loc2 east)\n    (closed_door kitchen loc2)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move east\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. Through an open plain door, to the West you see the pantry. \nAction: open door to east\nYou open the screen door, revealing the backyard. \nAction: move east\nYou are in the backyard. To the North you see a closed sliding patio door. To the South you see the street. To the East you see the driveway. Through an open screen door, to the West you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "loc4 - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc2 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited backyard)",\n      "(connected backyard kitchen west)",\n      "(connected backyard loc4 north)",\n      "(closed_door backyard loc4)",\n      "(connected backyard loc5 east)"\n    ],\n    "replace": {\n      "(at pantry)": "(at backyard)",\n      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"\n    },\n    "delete": [\n      "(closed_door kitchen loc2)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    loc5 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard loc5 east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move east']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    loc5 - location
  )
  (:init
    (at backyard)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard loc5 east)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move east
Action: move east
You are in the driveway. To the North you see the corridor. To the West you see the backyard. 
Step 6
Printing Output here:  {
  "objects": {
    "add": [
      "driveway - location",
      "corridor - location"
    ],
    "replace": {
      "loc5 - location": "driveway - location"
    },
    "delete": []
  },
  "init": {
    "add": [
      "(visited driveway)",
      "(connected driveway backyard west)",
      "(connected driveway corridor north)"
    ],
    "replace": {
      "(at backyard)": "(at driveway)",
      "(connected backyard loc5 east)": "(connected backyard driveway east)"
    },
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    driveway - location
    driveway - location
    corridor - location
  )
  (:init
    (at driveway)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard driveway east)
    (visited driveway)
    (connected driveway backyard west)
    (connected driveway corridor north)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/bd691209-e928-4df6-a87d-bc69f798a2cb?external=True'}
resp[] /check/bd691209-e928-4df6-a87d-bc69f798a2cb?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(MOVE DRIVEWAY CORRIDOR NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 14 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 14\n\t#Fluents: 12\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[0 / 0]--\n--[0 / 2]--\nTotal time: 8.30003e-05\nNodes generated during search: 6\nNodes expanded during search: 3\nPlan found with cost: 2\nFast-BFS search completed in 8.30003e-05 secs\n'}
actions ['(move driveway corridor north)', '(reach-goal)']
before map actions ['(move driveway corridor north)']
after map actions ['move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the plain door, revealing the pantry. \nAction: move west\nYou are in the pantry. Through an open plain door, to the East you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc3 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"\n    },\n    "delete": [\n      "(closed_door kitchen loc3)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. Through an open plain door, to the West you see the pantry. \nAction: open door to east\nYou open the screen door, revealing the backyard. \nAction: move east\nYou are in the backyard. To the North you see a closed sliding patio door. To the South you see the street. To the East you see the driveway. Through an open screen door, to the West you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "loc4 - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc2 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited backyard)",\n      "(connected backyard kitchen west)",\n      "(connected backyard loc4 north)",\n      "(closed_door backyard loc4)",\n      "(connected backyard loc5 east)"\n    ],\n    "replace": {\n      "(at pantry)": "(at backyard)",\n      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"\n    },\n    "delete": [\n      "(closed_door kitchen loc2)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    loc5 - location\n  )\n  (:init\n    (at backyard)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard loc5 east)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move east\nYou are in the driveway. To the North you see the corridor. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "driveway - location",\n      "corridor - location"\n    ],\n    "replace": {\n      "loc5 - location": "driveway - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited driveway)",\n      "(connected driveway backyard west)",\n      "(connected driveway corridor north)"\n    ],\n    "replace": {\n      "(at backyard)": "(at driveway)",\n      "(connected backyard loc5 east)": "(connected backyard driveway east)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['move north']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    driveway - location
    driveway - location
    corridor - location
  )
  (:init
    (at driveway)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard driveway east)
    (visited driveway)
    (connected driveway backyard west)
    (connected driveway corridor north)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> move north
Action: move north
You are in the corridor. To the North you see a closed wood door. To the South you see the driveway. To the West you see the living room. 
Step 7
Printing Output here:  {
  "objects": {
    "add": [
      "corridor - location",
      "living_room - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(visited corridor)",
      "(connected corridor driveway south)",
      "(connected corridor living_room west)",
      "(closed_door corridor living_room)"
    ],
    "replace": {
      "(at driveway)": "(at corridor)"
    },
    "delete": []
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    driveway - location
    driveway - location
    corridor - location
    corridor - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard driveway east)
    (visited driveway)
    (connected driveway backyard west)
    (connected driveway corridor north)
    (visited corridor)
    (connected corridor driveway south)
    (connected corridor living_room west)
    (closed_door corridor living_room)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n    corridor - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n    (visited corridor)\n    (connected corridor driveway south)\n    (connected corridor living_room west)\n    (closed_door corridor living_room)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/0d2c97e4-ec1c-49a9-970f-bb7b6ac03f31?external=True'}
resp[] /check/0d2c97e4-ec1c-49a9-970f-bb7b6ac03f31?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR CORRIDOR LIVING_ROOM)\n(MOVE CORRIDOR LIVING_ROOM WEST)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 17 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 17\n\t#Fluents: 15\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 9.29992e-05\nNodes generated during search: 10\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 9.29992e-05 secs\n'}
actions ['(open_door corridor living_room)', '(move corridor living_room west)', '(reach-goal)']
before map actions ['(open_door corridor living_room)', '(move corridor living_room west)']
after map actions ['open door to west', 'move west']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the plain door, revealing the pantry. \nAction: move west\nYou are in the pantry. Through an open plain door, to the East you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc3 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"\n    },\n    "delete": [\n      "(closed_door kitchen loc3)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. Through an open plain door, to the West you see the pantry. \nAction: open door to east\nYou open the screen door, revealing the backyard. \nAction: move east\nYou are in the backyard. To the North you see a closed sliding patio door. To the South you see the street. To the East you see the driveway. Through an open screen door, to the West you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "loc4 - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc2 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited backyard)",\n      "(connected backyard kitchen west)",\n      "(connected backyard loc4 north)",\n      "(closed_door backyard loc4)",\n      "(connected backyard loc5 east)"\n    ],\n    "replace": {\n      "(at pantry)": "(at backyard)",\n      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"\n    },\n    "delete": [\n      "(closed_door kitchen loc2)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the driveway. To the North you see the corridor. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "driveway - location",\n      "corridor - location"\n    ],\n    "replace": {\n      "loc5 - location": "driveway - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited driveway)",\n      "(connected driveway backyard west)",\n      "(connected driveway corridor north)"\n    ],\n    "replace": {\n      "(at backyard)": "(at driveway)",\n      "(connected backyard loc5 east)": "(connected backyard driveway east)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n  )\n  (:init\n    (at driveway)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': 'Action: move north\nYou are in the corridor. To the North you see a closed wood door. To the South you see the driveway. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited corridor)",\n      "(connected corridor driveway south)",\n      "(connected corridor living_room west)",\n      "(closed_door corridor living_room)"\n    ],\n    "replace": {\n      "(at driveway)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n    corridor - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n    (visited corridor)\n    (connected corridor driveway south)\n    (connected corridor living_room west)\n    (closed_door corridor living_room)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]
['open door to west', 'move west']
(define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    driveway - location
    driveway - location
    corridor - location
    corridor - location
    living_room - location
  )
  (:init
    (at corridor)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard driveway east)
    (visited driveway)
    (connected driveway backyard west)
    (connected driveway corridor north)
    (visited corridor)
    (connected corridor driveway south)
    (connected corridor living_room west)
    (closed_door corridor living_room)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
> open door to west
Action: open door to west
Unknown action: I'm not sure what you mean.
Step 8
> move west
Action: move west
You are in the living room. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the corridor. 
Step 9
Printing Output here:  {
  "objects": {
    "add": [
      "living_room - location"
    ],
    "replace": {},
    "delete": []
  },
  "init": {
    "add": [
      "(visited living_room)",
      "(connected living_room corridor east)",
      "(connected living_room loc1 north)",
      "(closed_door living_room loc1)"
    ],
    "replace": {
      "(at corridor)": "(at living_room)",
      "(closed_door corridor living_room)": "",
      "(connected corridor living_room west)": "(connected corridor living_room east)"
    },
    "delete": [
      "(at corridor)"
    ]
  }
}
Printing pf: (define (problem exploration)
  (:domain environment)
  (:objects
    kitchen - location
    north south east west - direction
    loc1 - location
    backyard - location
    pantry - location
    backyard - location
    loc4 - location
    driveway - location
    driveway - location
    corridor - location
    corridor - location
    living_room - location
    living_room - location
  )
  (:init
    (at living_room)
    (visited kitchen)
    (connected kitchen loc1 north)
    (closed_door kitchen loc1)
    (connected kitchen backyard east)
    (connected kitchen pantry west)
    (visited pantry)
    (connected pantry kitchen east)
    (visited backyard)
    (connected backyard kitchen west)
    (connected backyard loc4 north)
    (closed_door backyard loc4)
    (connected backyard driveway east)
    (visited driveway)
    (connected driveway backyard west)
    (connected driveway corridor north)
    (visited corridor)
    (connected corridor driveway south)
    (connected corridor living_room east)
    
    (visited living_room)
    (connected living_room corridor east)
    (connected living_room loc1 north)
    (closed_door living_room loc1)
  )
  (:goal 
    (exists (?x - location)
        (and
            (not (visited ?x))
            (at ?x)
        )
    )
  )
)
Printing data:  {'domain': '(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\n', 'problem': '(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n    corridor - location\n    living_room - location\n    living_room - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n    (visited corridor)\n    (connected corridor driveway south)\n    (connected corridor living_room east)\n    \n    (visited living_room)\n    (connected living_room corridor east)\n    (connected living_room loc1 north)\n    (closed_door living_room loc1)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)'}
Output of job request {'result': '/check/79278300-7443-4282-8915-b0558baeb036?external=True'}
resp[] /check/79278300-7443-4282-8915-b0558baeb036?external=True
celery_result <Response [200]>
Printing response: {'call': 'timeout 30 planutils run dual-bfws-ffparser -- domain problem plan', 'output': {'plan': '(OPEN_DOOR LIVING_ROOM LOC1)\n(MOVE LIVING_ROOM LOC1 NORTH)\n(REACH-GOAL)\n'}, 'output_type': 'generic', 'stderr': '', 'stdout': ' --- OK.\n Match tree built with 18 nodes.\n\nPDDL problem description loaded: \n\tDomain: ENVIRONMENT\n\tProblem: EXPLORATION\n\t#Actions: 18\n\t#Fluents: 15\nGoals found: 1\nGoals_Edges found: 1\nStarting search with 1-BFWS...\n--[1 / 0]--\n--[1 / 1]--\n--[1 / 2]--\n--[0 / 0]--\n--[0 / 3]--\nTotal time: 0.000128999\nNodes generated during search: 9\nNodes expanded during search: 6\nPlan found with cost: 3\nFast-BFS search completed in 0.000128999 secs\n'}
actions ['(open_door living_room loc1)', '(move living_room loc1 north)', '(reach-goal)']
before map actions ['(open_door living_room loc1)', '(move living_room loc1 north)']
after map actions ['open door to north', 'move north']
Priting some checks now:
[{'role': 'user', 'content': 'You will continue to build a PDDL representation of an environment while exploring it. We will be using the following domain file:\n(define (domain environment)\n  (:requirements :strips :typing :negative-preconditions :disjunctive-preconditions)\n  (:types\n    location\n    direction\n  )\n  (:predicates\n    (at ?loc - location)\n    (visited ?loc - location)\n    (connected ?loc1 - location ?loc2 - location ?dir - direction)\n    (closed_door ?loc1 - location ?loc2 - location)\n  )\n\n  (:action move\n    :parameters (?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and (at ?loc1) (connected ?loc1 ?loc2 ?dir) (not (closed_door ?loc1 ?loc2)))\n    :effect (and (not (at ?loc1)) (at ?loc2))\n  )\n\n  (:action open_door\n    :parameters (?loc1 - location ?loc2 - location)\n    :precondition (and (at ?loc1) (closed_door ?loc1 ?loc2))\n    :effect (not (closed_door ?loc1 ?loc2))\n  )\n)\n\nYour always start in the kitchen and your task is always to go to a location you have not been yet. Therefore, you will start with the following problem file.\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n  )\n  (:init\n    (at kitchen)\n    (visited kitchen)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nLet\'s work with an example. Say you\'re given this observation:\nYou are in the kitchen. To the South you see a closed wooden door. To the East you see a closed glass door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 south)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}\n\nNote a couple of things:\n1. When you see a closed door, you would use a placeholder for the room behind the door.\n2. When you enter a room, you learn the name of the room and will replace the placeholder with the name. You should also make sure to replace that name for all relations under "init".\n3. When you enter a room, you\'re "at" the room and it becomes "visited". You should also delete other "at" conditions because you can only be at one room.\n4. You should never delete the "visited" relations, because once a room is visited, it will remain that way.\n\nAt this point you will gain further observations:\nAction: open door to south\nYou open the wooden door, revealing the pantry.\nAction: move south\nYou are in the pantry. Through an open sliding patio door, to the North you see the kitchen. To the West you see a closed screen door.\n\nYou will modify the above problem file using add, replace, and delete operations (in a JSON format). You SHOULD NOT provide a problem file directly.\n{\n  "objects": {\n    "add": [\n      "loc3 - location"\n    ],\n    "replace": {\n      "loc1 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen north)",\n      "(connected pantry loc3 west)",\n      "(closed_door pantry loc3)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc1 south)": "(connected kitchen pantry south)"\n    },\n    "delete": [\n      "(closed_door kitchen loc1)"\n    ]\n  }\n}\n\n\nNow, let\'s start afresh. \nAction: look around\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. To the West you see a closed plain door. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "loc1 - location",\n      "loc2 - location",\n      "loc3 - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(connected kitchen loc1 north)",\n      "(closed_door kitchen loc1)",\n      "(connected kitchen loc2 east)",\n      "(closed_door kitchen loc2)",\n      "(connected kitchen loc3 west)",\n      "(closed_door kitchen loc3)"\n    ],\n    "replace": {},\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: open door to west\nYou open the plain door, revealing the pantry. \nAction: move west\nYou are in the pantry. Through an open plain door, to the East you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [],\n    "replace": {\n      "loc3 - location": "pantry - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited pantry)",\n      "(connected pantry kitchen east)"\n    ],\n    "replace": {\n      "(at kitchen)": "(at pantry)",\n      "(connected kitchen loc3 west)": "(connected kitchen pantry west)"\n    },\n    "delete": [\n      "(closed_door kitchen loc3)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the kitchen. To the North you see a closed wood door. To the East you see a closed screen door. Through an open plain door, to the West you see the pantry. \nAction: open door to east\nYou open the screen door, revealing the backyard. \nAction: move east\nYou are in the backyard. To the North you see a closed sliding patio door. To the South you see the street. To the East you see the driveway. Through an open screen door, to the West you see the kitchen. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "backyard - location",\n      "loc4 - location",\n      "loc5 - location"\n    ],\n    "replace": {\n      "loc2 - location": "backyard - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited backyard)",\n      "(connected backyard kitchen west)",\n      "(connected backyard loc4 north)",\n      "(closed_door backyard loc4)",\n      "(connected backyard loc5 east)"\n    ],\n    "replace": {\n      "(at pantry)": "(at backyard)",\n      "(connected kitchen loc2 east)": "(connected kitchen backyard east)"\n    },\n    "delete": [\n      "(closed_door kitchen loc2)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'Action: move east\nYou are in the driveway. To the North you see the corridor. To the West you see the backyard. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "driveway - location",\n      "corridor - location"\n    ],\n    "replace": {\n      "loc5 - location": "driveway - location"\n    },\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited driveway)",\n      "(connected driveway backyard west)",\n      "(connected driveway corridor north)"\n    ],\n    "replace": {\n      "(at backyard)": "(at driveway)",\n      "(connected backyard loc5 east)": "(connected backyard driveway east)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'Action: move north\nYou are in the corridor. To the North you see a closed wood door. To the South you see the driveway. To the West you see the living room. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly.'}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "corridor - location",\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited corridor)",\n      "(connected corridor driveway south)",\n      "(connected corridor living_room west)",\n      "(closed_door corridor living_room)"\n    ],\n    "replace": {\n      "(at driveway)": "(at corridor)"\n    },\n    "delete": []\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n    corridor - location\n    living_room - location\n  )\n  (:init\n    (at corridor)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n    (visited corridor)\n    (connected corridor driveway south)\n    (connected corridor living_room west)\n    (closed_door corridor living_room)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}, {'role': 'user', 'content': "Action: open door to west\nUnknown action: I'm not sure what you mean.\nAction: move west\nYou are in the living room. To the North you see a closed wood door. To the South you see a closed sliding patio door. To the East you see the corridor. \n\nYou will modify the above problem file using add, delate, and replace operations (in a JSON format). You SHOULD NOT provide a problem file directly."}, {'role': 'assistant', 'content': '{\n  "objects": {\n    "add": [\n      "living_room - location"\n    ],\n    "replace": {},\n    "delete": []\n  },\n  "init": {\n    "add": [\n      "(visited living_room)",\n      "(connected living_room corridor east)",\n      "(connected living_room loc1 north)",\n      "(closed_door living_room loc1)"\n    ],\n    "replace": {\n      "(at corridor)": "(at living_room)",\n      "(closed_door corridor living_room)": "",\n      "(connected corridor living_room west)": "(connected corridor living_room east)"\n    },\n    "delete": [\n      "(at corridor)"\n    ]\n  }\n}'}, {'role': 'user', 'content': 'After your previous edits, the current problem file is:\n\n(define (problem exploration)\n  (:domain environment)\n  (:objects\n    kitchen - location\n    north south east west - direction\n    loc1 - location\n    backyard - location\n    pantry - location\n    backyard - location\n    loc4 - location\n    driveway - location\n    driveway - location\n    corridor - location\n    corridor - location\n    living_room - location\n    living_room - location\n  )\n  (:init\n    (at living_room)\n    (visited kitchen)\n    (connected kitchen loc1 north)\n    (closed_door kitchen loc1)\n    (connected kitchen backyard east)\n    (connected kitchen pantry west)\n    (visited pantry)\n    (connected pantry kitchen east)\n    (visited backyard)\n    (connected backyard kitchen west)\n    (connected backyard loc4 north)\n    (closed_door backyard loc4)\n    (connected backyard driveway east)\n    (visited driveway)\n    (connected driveway backyard west)\n    (connected driveway corridor north)\n    (visited corridor)\n    (connected corridor driveway south)\n    (connected corridor living_room east)\n    \n    (visited living_room)\n    (connected living_room corridor east)\n    (connected living_room loc1 north)\n    (closed_door living_room loc1)\n  )\n  (:goal \n    (exists (?x - location)\n        (and\n            (not (visited ?x))\n            (at ?x)\n        )\n    )\n  )\n)\n\nPlease make more edits based on this problem file.'}, {'role': 'assistant', 'content': 'OK, I will base my edit on this problem file.'}]